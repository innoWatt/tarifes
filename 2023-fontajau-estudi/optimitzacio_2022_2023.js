/*
  OPTIMITZACIÓ Fontajau (2022-2023)
  =================================

  Resum del que fa el programa:
  - Calcular la suma de tots els mesos on tenim lectures
  - Variar potencies i recalcular fins a trobar les potencies optimes
  - Programar-ho en un sol fitxer .js per poder-ho executar amb NodeJS
*/

/*ESTRUCTURES DE DADES*/
  function Tipus(h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11,h12,h13,h14,h15,h16,h17,h18,h19,h20,h21,h22,h23){
    //un Tipus és una sequencia de 24 blocs, un per cada hora del dia
    this.h=new Array(24);
    this.h[0]=h0;
    this.h[1]=h1;
    this.h[2]=h2;
    this.h[3]=h3;
    this.h[4]=h4;
    this.h[5]=h5;
    this.h[6]=h6;
    this.h[7]=h7;
    this.h[8]=h8;
    this.h[9]=h9;
    this.h[10]=h10;
    this.h[11]=h11;
    this.h[12]=h12;
    this.h[13]=h13;
    this.h[14]=h14;
    this.h[15]=h15;
    this.h[16]=h16;
    this.h[17]=h17;
    this.h[18]=h18;
    this.h[19]=h19;
    this.h[20]=h20;
    this.h[21]=h21;
    this.h[22]=h22;
    this.h[23]=h23;
  }

  //un Periode és un tipus que s'aplica entre dues dates durant els dies laborals
  function Periode(tipus, data_inici, data_final){
    //tipus associat als dies laborables del Període (nombre enter)
    this.tipus = tipus;
    //les dates d'inici i final han de ser UTC per evitar problemes de canvis d'hora: new Date(Date.UTC(any,mes,dia))
    this.data_inici = data_inici;
    this.data_final = data_final;
  }

  //un dia festiu definit per una data (objecte Date) i un nom (string)
  function DiaFestiu(data,nom){
    this.data = data;
    this.nom = nom;
  }

  //Defineix un període de temps on la hora és GMT+1 (una hora més). Definit
  //per data inici i final (objectes Date)
  function CanviHorari(dataInici,dataFinal){
    this.dataInici = dataInici;
    this.dataFinal = dataFinal;
  }
/**/

/*FUNCIONS HELPER*/
  function tarifa6(input){
    //desempaqueta la variable input en "temps", "blocs" i "potència"
    var temps = input[0];   //array d'objectes Date()
    var blocs = input[1];   //array d'enters (1,2,3,4,5 ò 6)
    var poten = input[2];   //array de floats (potencia kW)

    //necessitem calcular "term_poten" + "term_energia" + "compl_reactiva":

    //1. TERM POTENCIA: hi ha un terme fix i penalitzacions
      //potConP{1,2,3,4,5,6} és la potència contractada en kW per cada bloc. Son variables globals.
      var potCon = new Array();
      potCon[1]=potConP1;
      potCon[2]=potConP2;
      potCon[3]=potConP3;
      potCon[4]=potConP4;
      potCon[5]=potConP5;
      potCon[6]=potConP6;

      /* EXCESSOS */
      //"exces": nou array d'arrays de booleans on anirem guardant si en l'instant i hi ha o no un excés de potència (1 ò 0) pel bloc p
      // exemple: exces[p][i]==true (bloc p, instant i)
      var exces = new Array();
      for(var p=1;p<7;p++) exces[p] = new Array();

      //emplena els arrays amb trues o falses
      for(var i=0; i<temps.length; i++)
        for(var p=1; p<7; p++)
          exces[p][i] = parseFloat(poten[i]) > parseFloat(potCon[p]); // Aquesta expressió valdrà true o false

      //preus per kW per cada període (p1,p2,...,p6)
      var preus = new Array();
      preus[1] = eurKWP1;
      preus[2] = eurKWP2;
      preus[3] = eurKWP3;
      preus[4] = eurKWP4;
      preus[5] = eurKWP5;
      preus[6] = eurKWP6;

      //calculem el cost (€) de la potencia
      var term_poten = new Array();

      //terme exces de potència PENALITZACIONS. term_exces[p][i] (bloc p, dada i)
      var term_exces = new Array(); for(var p=1; p<7; p++) term_exces[p] = new Array();
      var excessos = new Array(); //suma dels euros d'excessos pels 6 blocs

      //les Ac i les k estan explicades al boe com calcular-les: BOE 1164/2001:
      //hi ha una Ac per cada bloc
      var Ac = new Array(); for(var p=1; p<7; p++) Ac[p] = new Array()
      var k = new Array(); k[1]=1.00; k[2]=0.50; k[3]=0.37; k[4]=0.37; k[5]=0.37; k[6]=0.17;

      //recorrem el temps per calcular term_poten i term_exces
      for(var i=0; i<temps.length; i++){
        //inicialitza a 0
        term_poten[i] = 0;

        //recorre tots els blocs tarifaris
        for(var p=1; p<7; p++){
          // PART FIXA en la 6.1, es factura sempre la potència contractada multiplicat pel preu /12
          term_poten[i] += (potCon[p]*preus[p]);
        }

        //suma les penalitzacions (terme exces de la potència)
        excessos[i]=0;
        for(var p=1; p<7; p++){
          // EXCESSOS. inicialitza'l a 0
          term_exces[p][i] = 0;

          //suma de totes les potències que es passen de la potència contractada
          var suma_Pdj_menys_Pci_al_quadrat = 0;

          //aplica penalitzacions: tots els moments que s'ha superat la potència contractada fins a l'instant i
          for(var j=0; j<=i; j++)
            if(exces[p][j] && blocs[j]==p)
              suma_Pdj_menys_Pci_al_quadrat += Math.pow(poten[j]-potCon[p],2);

          //calcula Ac
          Ac[p][i] = Math.sqrt(suma_Pdj_menys_Pci_al_quadrat);

          //el 1.40596 és el 234 que surt el boe. 234 és en pessetes, i aquest valor és en euros
          term_exces[p][i] += k[p] * 1.40596 * Ac[p][i];
          excessos[i] += term_exces[p][i];
        }
      }

    //----------------------------------------------------------------------
    //2. TERM ENERGIA
    //----------------------------------------------------------------------
      //calculem energia (kWh) consumida a partir de potència (kW) (fent la integral)

      //energia consumida (kWh) a cada bloc p (acumulada). energia[p][i]
      //energia consumida a cada bloc (1,2,3,4,5,6)
      var energia = new Array(); for(var p=1; p<7; p++) energia[p] = new Array();

      //omplim de zeros el vector d'energia. dada i, periode p
      for(var i=0; i<temps.length; i++)
        for(var p=1; p<7; p++)
          energia[p][i] = 0;

      //valor inicial de la integral de la potència (energia en kWh)
      energia[blocs[0]][0] = 0 + poten[0]*tint;;

      //recorrem el temps i anem acumulant l'energia consumida multiplicant la potència pel timestep en hores (~integral)
      for(var i=1;i<temps.length;i++){
        //primer posa l'energia i igual a l'anterior (que per força serà el màxim)
        for(var p=1; p<7; p++)
          energia[p][i] = Math.max.apply(null,energia[p]);

        //actualitza l'energia només pel bloc actual, i suma el valor anterior perquè sigui l'acumulada
        var b = blocs[i];
        energia[b][i] = energia[b][i-1] + poten[i] * tint;  //integral
      }

      //Calculem el cost (€) de l'energia consumida.
      var preus = new Array(); //per p1,p2,p3,p4,p5 i p6
      preus[1] = eurKWhP1;
      preus[2] = eurKWhP2;
      preus[3] = eurKWhP3;
      preus[4] = eurKWhP4;
      preus[5] = eurKWhP5;
      preus[6] = eurKWhP6;

      //ara anem sumant dia a dia el que costa l'energia activa (€)
      var term_energ = new Array();

      //valor inicial
      term_energ[0] = 0 + energia[blocs[0]][0] * preus[blocs[0]];

      //recorrem el temps
      for(i=1; i<temps.length; i++){
        term_energ[i] = term_energ[i-1];
        //recorrem cada bloc i li sumem l'energia consumida aquest instant de temps multiplicat pel preu
        for(var p=1; p<7; p++)
          term_energ[i] += (energia[p][i] - energia[p][i-1]) * preus[p];
      }
    //----------------------------------------------------------------------
    //3. COMPL REACTIVA
    //----------------------------------------------------------------------
      //energia reactiva (kVArh). energia_reactiva[p][i] (bloc p, dada i)
      var energia_reactiva = new Array();
      for(var p=1; p<6; p++)
        energia_reactiva[p] = new Array();

      //TODO incialitza tot a zero: esperar tenir dades
      for(var i=0; i<temps.length; i++)
        for(var p=1; p<6; p++)
          energia_reactiva[p][i] = 0;

      //array de cost (euros) d'energia reactiva
      var compl_reactiva = new Array();

      //variables necessàries per calcular l'energia reactiva: exces, cosinus de phi, preu
      var exces = new Array();
      for(var p=1; p<6; p++) exces[p] = new Array();

      var cosPhi = new Array();
      for(var p=1; p<6; p++) cosPhi[p] = new Array();

      var preu = new Array();     //el preu va en funció del cosinus de phi
      for(var p=1; p<6; p++) preu[p] = new Array();

      for(var i=0; i<temps.length; i++){
        for(var b=1; b<6; b++){
          //calcula excés
          if (energia_reactiva[b][i] > 0.33*energia[b][i] )
            exces[b][i] = energia_reactiva[b][i] - 0.33*energia[b][i];
          else
            exces[b][i] = 0;

          //calcula el cosinus de phi
          cosPhi[b][i] = Math.cos( Math.atan( energia_reactiva[b][i] / energia[b][i] ) );

          //calcula el preu de l'energia reactiva en funcio de cosinus de phi
          if(cosPhi[b][i] >= 0.95)    preu[b][i] = 0
          else if(cosPhi[b][i] >= 0.80) preu[b][i] = 0.041554
          else              preu[b][i] = 0.062332
        }
      }

      //calcula el cost de l'energia reactiva

      //valor inicial per cada bloc
      compl_reactiva[0] = 0;
      for(var p=1; p<6; p++)
        compl_reactiva[0] += exces[p][0] * preu[p][0];

      for(var i=1; i<temps.length; i++){
        compl_reactiva[i] = compl_reactiva[i-1];
        for(var p=1; p<6; p++)
          compl_reactiva[i] += exces[p][i] * preu[p][i];
      }
    //----------------------------------------------------------------------
    //4. COSTOS TOTALS
    //----------------------------------------------------------------------
      //suma dels costos (€) energia + potència (fix i penalitzacions) + energia reactiva
      var suma_termes = new Array();

      let terme_topall=[];
      let kwh_totals=[];
      for(var i=0; i<temps.length; i++){
        kwh_totals[i]=0;
        for(var p=1; p<7; p++) kwh_totals[i] += energia[p][i];
        terme_topall[i]=kwh_totals[i]*preu_topall;
      }

      for(var i=0; i<temps.length; i++){
        //suma els costos de: energia, el terme fix de potència i energia reactiva
        suma_termes[i] = term_energ[i] + term_poten[i] + excessos[i] + compl_reactiva[i] + terme_topall[i];;
      }

      //total sense iva i amb iva
      var total_sense_iva = new Array();
      var total_amb_iva = new Array();
      for(var i=0; i<temps.length; i++){
        total_sense_iva[i] = suma_termes[i] + suma_termes[i]*tax_im1 + tax_alq;
        total_amb_iva[i] = total_sense_iva[i] * (parseFloat(1)+parseFloat(tax_iva));
      }

      var impostos = new Array();
      for(var i=0; i<temps.length; i++){
        impostos[i]  = suma_termes[i]*tax_im1;
        impostos[i] += total_sense_iva[i]*tax_iva;
      }

    //aquí ja hauria acabat la funció. Ara mostrem per pantalla els resultats:

    //mostra per cada instant de temps el preu a pagar total
    /*
    for(var i=0; i<temps.length; i++){
      console.log(
        temps[i].toUTCString()+"\tP"+blocs[i]+"\t"+poten[i]+" kW\t"+total_amb_iva[i].toFixed(2)+"€"
      );
    }
    */

    var fi = temps.length-1; //index final

    //veure RESUM FACTURA
    //console.log("[+] RESUM FACTURA");
    //console.log(` P1: ${potCon[1]}[kW]x${eurKWP1.toFixed(6)}[€/kW] = ${(potCon[1]*eurKWP1).toFixed(2)}[€]\t| ${energia[1][fi]}[kWh]x${eurKWhP1}[€/kWh] = ${(energia[1][fi]*eurKWhP1).toFixed(2)}[€]`);
    //console.log(` P2: ${potCon[2]}[kW]x${eurKWP2.toFixed(6)}[€/kW] = ${(potCon[2]*eurKWP2).toFixed(2)}[€]\t| ${energia[2][fi]}[kWh]x${eurKWhP2}[€/kWh] = ${(energia[2][fi]*eurKWhP2).toFixed(2)}[€]`);
    //console.log(` P3: ${potCon[3]}[kW]x${eurKWP3.toFixed(6)}[€/kW] = ${(potCon[3]*eurKWP3).toFixed(2)}[€]\t| ${energia[3][fi]}[kWh]x${eurKWhP3}[€/kWh] = ${(energia[3][fi]*eurKWhP3).toFixed(2)}[€]`);
    //console.log(` P4: ${potCon[4]}[kW]x${eurKWP4.toFixed(6)}[€/kW] = ${(potCon[4]*eurKWP4).toFixed(2)}[€]\t| ${energia[4][fi]}[kWh]x${eurKWhP4}[€/kWh] = ${(energia[4][fi]*eurKWhP4).toFixed(2)}[€]`);
    //console.log(` P5: ${potCon[5]}[kW]x${eurKWP5.toFixed(6)}[€/kW] = ${(potCon[5]*eurKWP5).toFixed(2)}[€]\t| ${energia[5][fi]}[kWh]x${eurKWhP5}[€/kWh] = ${(energia[5][fi]*eurKWhP5).toFixed(2)}[€]`);
    //console.log(` P6: ${potCon[6]}[kW]x${eurKWP6.toFixed(6)}[€/kW] = ${(potCon[6]*eurKWP6).toFixed(2)}[€]\t| ${energia[6][fi]}[kWh]x${eurKWhP6}[€/kWh] = ${(energia[6][fi]*eurKWhP6).toFixed(2)}[€]`);
    //console.log(" Consum energia  [kWh]: "+kwh_totals[fi]);
    //console.log(" Terme Potència    [€]: "+term_poten[fi].toFixed(2));
    //console.log(" Terme Penalitzac. [€]: "+excessos[fi].toFixed(2));
    //console.log(" Terme Energia     [€]: "+term_energ[fi].toFixed(2));
    //console.log(" Terme topall      [€]: "+terme_topall[fi].toFixed(2));
    //console.log(" Lloguer comptador [€]: "+tax_alq.toFixed(2));
    //console.log(" Impostos          [€]: "+impostos[fi].toFixed(2));
    //console.log(" TOTAL + IVA       [€]: "+total_amb_iva[fi].toFixed(2));

    return {
      term_poten:    term_poten[fi],
      excessos:      excessos[fi],
      total_amb_iva: total_amb_iva[fi],
    };
    //return total_amb_iva[fi];
  }

  //funcio "wrapper"
  //calcula el preu de la factura una vegada estan els 11 inputs necessaris definits
  //(variables globals)
  function calcula(){
    //genera arrays de temps i blocs per tots els períodes i guarda'ls a la variable global "temps_blocs"
    var temps_blocs = generaBlocs();

    //ara necessitem separar la variable anterior per mesos i guarda-ho a la variable global "estructura"
    var estructura = separaPerMesos(temps_blocs);

    //calcula la tarifa
    var cost = aplicaTarifa(estructura); //retorna un array de costos per mesos

    return cost; //array objectes
  }

  //Llegeix les variables globals "tipus" i "periodes" i genera el scheduling de tarifa elèctrica
  //retorna un array de blocs per cada hora de tots els periodes
  function generaBlocs(){
    //comprova que el weekmod està ben definit
    if(weekmod >= tipus.length){console.log("ERROR. El weekmod fa referència a un tipus que no existeix");return;}

    //calcula quants elements tindrà la taula, donat "tint" i els dies d'inici i final
    //passa els milisegons a hores i llavors divideix per "tint" que està en hores. ha de ser un nombre enter
    var dia_inici = periodes[0].data_inici;
    var dia_final = periodes[periodes.length-1].data_final;
    var nombre_de_timesteps = (dia_final - dia_inici)/3600000/tint + 1;

    //recorre els canvis horaris per sumar o restar timesteps
    for(var j=0; j<canvisHoraris.length; j++){
      var d_inici = canvisHoraris[j].dataInici
      var d_final = canvisHoraris[j].dataFinal

      //si el dia d'inici esta en GMT+1 (com ara maig o octubre)
      if(d_inici <= dia_inici && dia_inici < d_final){
        //RESTAR UNA HORA AL DIA D'INICI: exemple: 1 de juny 00:00 ESP és realment 29 abril 23:00 UTC
        var dia_inici = new Date(periodes[0].data_inici.getTime() - 1*60*60*1000)

        //I si el dia final està en horari d'hivern, suma al nombre de timesteps 1/tint (exemple: 1/.25 = 4)
        //com ara octubre
        if(dia_final < d_inici || d_final < dia_final)
          nombre_de_timesteps += 1/tint;
      }else{//vol dir que el dia inicial no està en horari d'estiu, com ara març o gener
        //si el dia final està en horari d'estiu resta 1 timestep
        //com ara març
        if(d_inici <= dia_final && dia_final < d_final)
          nombre_de_timesteps -= 1/tint;
      }
    }

    //comprova que el nombre_de_timesteps és igual o més petit al nombre de dades de consum energètic
    //restem 1 perquè la data final no la fem servir
      if(nombre_de_timesteps-1 != energy.length){
        console.log("WARNING: El nombre de dades ("+energy.length+") no coincideix exactament amb el nombre de timesteps ("+(nombre_de_timesteps-1)+")");
        while(nombre_de_timesteps-1>energy.length) energy.push(0)
        while(nombre_de_timesteps-1<energy.length) energy.pop()
      }

      /* CONSTRUCCIÓ DE LA VARIABLE DE RETORN */
      var temps = new Array(); //contindrà cada instant de temps en objectes de la classe Date()
      var blocs = new Array(); //contindrà cada bloc corresponent (nombres enters 1,2,3,4,5 ò 6)
      var numer = new Array(); //contindrà la dada número n (~id)

      //itera cada timestep per trobar el bloc correcte
      for(var i=0; i<nombre_de_timesteps; i++){
        //calcula en quin instant de temps estem. Sintaxi: new Date(milisegons)
        var dia_i = new Date(dia_inici.getTime() + i * tint * 3600 * 1000);

        /*
          TENIR EN COMPTE EL CANVI D'HORA:
          si el dia_i està dins l'interval que marca el canvi d'hora, posa la propietat "esHorariEstiu" a l'objecte Date() actual
        */
        for(var j=0; j<canvisHoraris.length; j++){
          var d_inici = canvisHoraris[j].dataInici
          var d_final = canvisHoraris[j].dataFinal
          if (d_inici <= dia_i && dia_i < d_final){
            dia_i.esHorariEstiu = 1;
            break;
          }
          dia_i.esHorariEstiu = 0;
        }

        //CLONA L'OBJECTE DIA_I PER CONSIDERAR CANVIS HORARIS I ASSIGNAR BÉ EL PERÍODE I EL BLOC
        var instant_i = new Date(dia_i.getTime());
        //suma 1 a la hora
        if(dia_i.esHorariEstiu) instant_i.setUTCHours(instant_i.getUTCHours()+1);

        //afegim l'instant_i a l'array temps
        temps.push(instant_i);
        //afegim el número i a l'array "numer"
        numer.push(i);

        //recorre tots els periodes per veure en quin període cau l'instant_i
        var periode_actual=0;

        for(var j=0 ; j<periodes.length; j++){
          if(instant_i >= periodes[j].data_inici && instant_i < periodes[j].data_final){
            periode_actual=j;
            break;
          }
          if(j >= periodes.length ){
            console.log('error, el dia '+dia_i+' no està dins cap període');
            return;
          }
        }

        //comprova si el dia_i és festiu accedint a la variable global "festius"
        var esFestiu = false;
        for(var j=0; j<festius.length; j++){
          //Agafa dia, mes i any tant del dia D com del festiu F
          var dD = instant_i.getUTCDate();
          var mD = instant_i.getUTCMonth();
          var aD = instant_i.getUTCFullYear();
          var dF = festius[j].data.getUTCDate();
          var mF = festius[j].data.getUTCMonth();
          var aF = festius[j].data.getUTCFullYear();
          if(dD==dF && mD==mF && aD==aF){
            esFestiu=true;
            break;
          }
        };

        //comprova si el dia_i cau en cap de setmana o en FESTIU
        var tipus_actual=0;
        if(instant_i.getUTCDay()==0 || instant_i.getUTCDay()==6 || esFestiu)
            tipus_actual = weekmod;
        else
            tipus_actual = periodes[periode_actual].tipus;

        //comprova hora actual i, finalment, el que ens interessa: el bloc actual
        var hora_actual = instant_i.getUTCHours();
        var bloc_actual = tipus[tipus_actual].h[hora_actual];

        //afegeix el bloc actual a la variable de retorn blocs_totals
        blocs.push(bloc_actual);
      }

      //finalment retornem la variable temps i blocs agrupada en un array de 3 arrays
      var temps_blocs = new Array();
      temps_blocs.push(temps); //objectes Date()
      temps_blocs.push(blocs); //enters (1 a 6)
      temps_blocs.push(numer); //enters (id)
      return temps_blocs;
  }

  //separa l'array de temps, blocs i potència (energy) per mesos en nous arrays
  function separaPerMesos(temps_blocs){
    //desempaqueta l'array temps_blocs
    //t: array d'objectes Date(). b: array de nombres enters 1,2,ò 3. n: array de ids (enters)
    var t = temps_blocs[0];
    var b = temps_blocs[1];
    var n = temps_blocs[2];

    //nous arrays d'arrays buits. El primer índex es el mes, i el segon, la dada corresponent. Exemple: mesos[8][3] és l'instant 3 del mes 8
    var mesos = new Array(); //array de arrays de objectes Date()
    var blocs = new Array(); //array de arrays de enters (1,2 ò 3)
    var poten = new Array(); //array de arrays de floats (potència kW)
    var numer = new Array(); //array de arrays de enters (1,2,3,4...)

    //separa per mesos (omple arrays de "mesos")
    mesos[0] = new Array();

    //comptador de mesos
    var j=0;

    //recorre tot el temps t
    for(var i=1; i<t.length; i++){
      //Afegeix la data (i-1) al vector mesos[j]
      mesos[j].push(t[i-1]);

      //per tenir en compte canvis d'hora: clona l'objecte t[i-1] i t[i]
      var current_t = new Date(t[i-1].getTime());
      var seguent_t = new Date(t[i  ].getTime());

      //si el mes de la dada i-1 és més petit que la dada següent, augmenta el mes
      if ( current_t.getUTCMonth() < seguent_t.getUTCMonth() || current_t.getUTCFullYear() < seguent_t.getUTCFullYear() )
        mesos[++j] = new Array();
    }

    //si l'ultim mes no te dades, elimina'l
    if(mesos[j].length==0) mesos.pop();

    //Ara cal tenir un vector d'energia i de blocs per cada mes
    blocs[0] = new Array();
    poten[0] = new Array();
    numer[0] = new Array();

    //ara omplim la resta de variables que tindran la mateixa estructura que mesos
    //comptadors de mesos i ids
    var i=0, j=0;

    mesos.forEach(function(mes){
      mes.forEach(function(moment){
        blocs[i].push(b[j]);
        poten[i].push(energy[j]);  //energy és la variable global carregada des del fitxer (array de floats)
        numer[i].push(j);          //posa el numero j a l'array i incrementa 1
        j++;
      });
      poten[++i] = new Array();
      blocs[i] = new Array();
      numer[i] = new Array();
    });

    //agrupa els arrays en un array de retorn
    var estructura = new Array();
    estructura.push(mesos);
    estructura.push(blocs);
    estructura.push(poten);
    estructura.push(numer);
    return estructura;
  }

  //aplica tarifa 3 ò 6 a tots els mesos
  function aplicaTarifa(estructura){
    //estructura es un array de 3 elements: mesos, blocs i potencia
    var mesos = estructura[0];
    var blocs = estructura[1];
    var poten = estructura[2];

    //array amb els costos per cada mes
    var cost = new Array();

    //crida tarifa per cada mes
    for(var i=0; i<mesos.length; i++) {
      var input = new Array();
      input.push(mesos[i]);
      input.push(blocs[i]);
      input.push(poten[i]);
      cost[i] = tarifa6(input);
    }

    //retorna l'array de costos
    return cost;
  }
/**/

/*VARIABLES GLOBALS*/
  let periodes = new Array(); //array d'objectes Periode
  let energy; //array de floats (potència (kW))
  let eReact; //array de floats (energia reactiva (kVArh))

  //potències contractades (kW)
  let potConP1 = 250; //kW contractats
  let potConP2 = 250; //kW contractats
  let potConP3 = 250; //kW contractats
  let potConP4 = 250; //kW contractats
  let potConP5 = 250; //kW contractats
  let potConP6 = 250; //kW contractats

  //preus per kW per cada període
  let eurKWP1 = 31*0.038308; //€/kW
  let eurKWP2 = 31*0.032600; //€/kW
  let eurKWP3 = 31*0.010965; //€/kW
  let eurKWP4 = 31*0.010011; //€/kW
  let eurKWP5 = 31*0.007487; //€/kW
  let eurKWP6 = 31*0.005483; //€/kW

  //preus per kWh per cada període
  let eurKWhP1 = 0.235196; //€/kWh
  let eurKWhP2 = 0.224059; //€/kWh
  let eurKWhP3 = 0.000000; //€/kWh
  let eurKWhP4 = 0.000000; //€/kWh
  let eurKWhP5 = 0.000000; //€/kWh
  let eurKWhP6 = 0.182122; //€/kWh

  //ALTRES i IMPOSTOS
  let tax_alq     = 30.51;   //€
  let preu_topall = 0.00487; //eur/kWh
  let tax_im1     = 0.00500; //impost electricitat
  let tax_iva     = 0.21;

  //tipus: Array d'objectes de la classe Tipus
  //aquesta taula es troba al google fàcilment
  let tipus=[
    //hora:  00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23
    new Tipus(6, 6, 6, 6, 6, 6, 6, 6, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2 ), //tipus 0 gener febrer juliol desembre
    new Tipus(6, 6, 6, 6, 6, 6, 6, 6, 3, 2, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3 ), //tipus 1 març novembre
    new Tipus(6, 6, 6, 6, 6, 6, 6, 6, 5, 4, 4, 4, 4, 4, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5 ), //tipus 2 abril maig octubre
    new Tipus(6, 6, 6, 6, 6, 6, 6, 6, 4, 3, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 4, 4 ), //tipus 3 juny agost setembre
    new Tipus(6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 ), //tipus 4 dissabtes diumenges i festius
  ];
  //weekmod: número enter. tipus que defineix els caps de setmana i festius
  //nº del tipus dels caps de setmana i festius
  let weekmod = 4;

  //distrib. anual 0 1 2 3 4 5 6 7 8 9 A B
  //mes            G F M A M J J A S O N D
  let tipus_mesos=[0,0,1,2,2,3,0,3,3,2,1,0];

  //tint: 60 minuts (en hores). Vol dir que tenim una dada de potència (kW) cada hora
  var tint=1; //time interval (en hores, per exemple: 0.25)

  //mesos passats a numeros per definir periodes i no confondre amb el dia
  let gen=0, feb=1, mar=2, abr=3, mai=4, jun=5, jul=6, ago=7, set=8, oct=9, nov=10, des=11;

  //festius: Array d'objectes de la classe DiaFestiu
  let festius=[
    new DiaFestiu(new Date(Date.UTC(2022,gen,01)),"Año Nuevo"                  ),//2022
    new DiaFestiu(new Date(Date.UTC(2022,gen,06)),"Epifanía del Señor"         ),//2022
    new DiaFestiu(new Date(Date.UTC(2022,abr,15)),"Viernes Santo"              ),//2022
    new DiaFestiu(new Date(Date.UTC(2022,abr,18)),"Lunes de Pascua"            ),//2022
    new DiaFestiu(new Date(Date.UTC(2022,ago,15)),"Asunción de la Virgen"      ),//2022
    new DiaFestiu(new Date(Date.UTC(2022,oct,12)),"Fiesta Nacional de España"  ),//2022
    new DiaFestiu(new Date(Date.UTC(2022,nov,01)),"Día de Todos los Santos"    ),//2022

    new DiaFestiu(new Date(Date.UTC(2022,des,06)),"Día de la Constitución"     ),//2022
    new DiaFestiu(new Date(Date.UTC(2022,des,08)),"Inmaculada Concepción"      ),//2022
    //new DiaFestiu(new Date(Date.UTC(2022,des,26)),"Lunes siguiente a Navidad"  ),//2022 //no s'aplica aquest dia festiu

    new DiaFestiu(new Date(Date.UTC(2023,gen,06)),"Reyes"                      ),//2023
    new DiaFestiu(new Date(Date.UTC(2023,abr,07)),"Viernes Santo"              ),//2023
    new DiaFestiu(new Date(Date.UTC(2023,abr,10)),"Pascua Florida"             ),//2023
    new DiaFestiu(new Date(Date.UTC(2023,mai,01)),"Fiesta del Trabajo"         ),//2023
    new DiaFestiu(new Date(Date.UTC(2023,jun,24)),"San Juan"                   ),//2023
    new DiaFestiu(new Date(Date.UTC(2023,ago,15)),"La Asunción"                ),//2023
    new DiaFestiu(new Date(Date.UTC(2023,set,11)),"Diada Nacional de Catalunya"),//2023
    new DiaFestiu(new Date(Date.UTC(2023,oct,12)),"Fiesta Nacional de España"  ),//2023
    new DiaFestiu(new Date(Date.UTC(2023,nov,01)),"Todos los Santos"           ),//2023
    new DiaFestiu(new Date(Date.UTC(2023,des,06)),"Dia de la Constitució"      ),//2023
    new DiaFestiu(new Date(Date.UTC(2023,des,08)),"La Inmaculada"              ),//2023
    new DiaFestiu(new Date(Date.UTC(2023,des,25)),"Navidad"                    ),//2023
    new DiaFestiu(new Date(Date.UTC(2023,des,26)),"San Esteban"                ),//2023
  ];

  //canvisHoraris: intervals on s'aplica GMT+1
  let canvisHoraris=[
    new CanviHorari(
      new Date(Date.UTC(2022,mar,27,02,00)),
      new Date(Date.UTC(2022,oct,30,02,00))
    ),
    new CanviHorari(
      new Date(Date.UTC(2023,mar,26,02,00)),
      new Date(Date.UTC(2023,oct,29,02,00))
    ),
  ];
//fi variables comunes

//funcions per mesos i global
  function juliol(){//2022
    periodes=[
      new Periode(tipus_mesos[jul],new Date(Date.UTC(2022,jul,01)),new Date(Date.UTC(2022,ago,01)))
    ];

    //preus per kW per cada període
    eurKWP1 = 31*0.039562; //€/kW
    eurKWP2 = 31*0.030486; //€/kW
    eurKWP3 = 31*0.014036; //€/kW
    eurKWP4 = 31*0.011610; //€/kW
    eurKWP5 = 31*0.007007; //€/kW
    eurKWP6 = 31*0.004878; //€/kW

    //preus per kWh per cada període
    eurKWhP1 = 0.244986; //€/kWh
    eurKWhP2 = 0.233768; //€/kWh
    eurKWhP3 = 0;        //€/kWh
    eurKWhP4 = 0;        //€/kWh
    eurKWhP5 = 0;        //€/kWh
    eurKWhP6 = 0.192587; //€/kWh

    //altres
    tax_alq     = 30.51;   //€
    preu_topall = 0.093205; //eur/kWh
    tax_im1     = 0.00500; //impost electricitat
    tax_iva     = 0.21;

    energy=[
      19   ,
      20   ,
      20   ,
      19   ,
      19   ,
      20   ,
      9    ,
      14   ,
      31   ,
      36   ,
      38   ,
      38   ,
      38   ,
      36   ,
      26   ,
      22   ,
      21   ,
      19   ,
      19   ,
      20   ,
      22   ,
      26   ,
      29   ,
      24   ,
      21   ,
      20   ,
      21   ,
      20   ,
      21   ,
      21   ,
      14   ,
      17   ,
      14   ,
      14   ,
      14   ,
      12   ,
      14   ,
      9    ,
      9    ,
      10   ,
      9    ,
      11   ,
      10   ,
      10   ,
      9    ,
      15   ,
      20   ,
      20   ,
      18   ,
      18   ,
      19   ,
      18   ,
      18   ,
      18   ,
      9    ,
      7    ,
      9    ,
      10   ,
      12   ,
      13   ,
      14   ,
      11   ,
      10   ,
      8    ,
      8    ,
      8    ,
      8    ,
      7    ,
      8    ,
      12   ,
      21   ,
      19   ,
      18   ,
      18   ,
      18   ,
      19   ,
      18   ,
      18   ,
      9    ,
      14   ,
      20   ,
      22   ,
      23   ,
      24   ,
      21   ,
      25   ,
      22   ,
      20   ,
      21   ,
      20   ,
      22   ,
      21   ,
      20   ,
      22   ,
      25   ,
      21   ,
      18   ,
      18   ,
      18   ,
      18   ,
      18   ,
      19   ,
      9    ,
      14   ,
      22   ,
      24   ,
      26   ,
      26   ,
      27   ,
      29   ,
      24   ,
      20   ,
      20   ,
      17   ,
      3    ,
      19   ,
      20   ,
      24   ,
      27   ,
      20   ,
      20   ,
      19   ,
      19   ,
      19   ,
      18   ,
      19   ,
      10   ,
      16   ,
      30   ,
      36   ,
      34   ,
      34   ,
      33   ,
      39   ,
      38   ,
      33   ,
      32   ,
      23   ,
      18   ,
      20   ,
      20   ,
      20   ,
      22   ,
      19   ,
      18   ,
      18   ,
      19   ,
      18   ,
      19   ,
      18   ,
      9    ,
      16   ,
      29   ,
      35   ,
      36   ,
      33   ,
      37   ,
      37   ,
      36   ,
      31   ,
      30   ,
      15   ,
      18   ,
      21   ,
      18   ,
      23   ,
      25   ,
      20   ,
      19   ,
      19   ,
      20   ,
      18   ,
      20   ,
      19   ,
      10   ,
      18   ,
      26   ,
      24   ,
      22   ,
      22   ,
      24   ,
      23   ,
      20   ,
      20   ,
      16   ,
      12   ,
      14   ,
      15   ,
      15   ,
      21   ,
      23   ,
      19   ,
      18   ,
      18   ,
      18   ,
      19   ,
      18   ,
      18   ,
      9    ,
      10   ,
      11   ,
      11   ,
      11   ,
      13   ,
      17   ,
      12   ,
      7    ,
      8    ,
      7    ,
      8    ,
      8    ,
      8    ,
      9    ,
      14   ,
      20   ,
      19   ,
      18   ,
      19   ,
      18   ,
      18   ,
      19   ,
      18   ,
      9    ,
      9    ,
      9    ,
      9    ,
      10   ,
      9    ,
      10   ,
      10   ,
      9    ,
      10   ,
      10   ,
      9    ,
      9    ,
      10   ,
      9    ,
      15   ,
      20   ,
      21   ,
      19   ,
      19   ,
      20   ,
      19   ,
      19   ,
      18   ,
      11   ,
      14   ,
      20   ,
      25   ,
      25   ,
      27   ,
      27   ,
      28   ,
      27   ,
      23   ,
      24   ,
      23   ,
      28   ,
      28   ,
      23   ,
      26   ,
      29   ,
      21   ,
      19   ,
      20   ,
      19   ,
      18   ,
      20   ,
      19   ,
      10   ,
      15   ,
      21   ,
      25   ,
      25   ,
      26   ,
      24   ,
      27   ,
      22   ,
      21   ,
      20   ,
      20   ,
      22   ,
      21   ,
      20   ,
      22   ,
      23   ,
      19   ,
      18   ,
      18   ,
      18   ,
      18   ,
      18   ,
      18   ,
      10   ,
      11   ,
      18   ,
      24   ,
      25   ,
      26   ,
      26   ,
      24   ,
      23   ,
      21   ,
      20   ,
      22   ,
      25   ,
      28   ,
      22   ,
      22   ,
      34   ,
      35   ,
      18   ,
      19   ,
      18   ,
      18   ,
      18   ,
      18   ,
      10   ,
      16   ,
      20   ,
      26   ,
      27   ,
      31   ,
      73   ,
      27   ,
      25   ,
      23   ,
      22   ,
      21   ,
      21   ,
      19   ,
      19   ,
      24   ,
      44   ,
      32   ,
      18   ,
      17   ,
      18   ,
      18   ,
      18   ,
      17   ,
      10   ,
      15   ,
      19   ,
      25   ,
      26   ,
      26   ,
      30   ,
      27   ,
      26   ,
      23   ,
      21   ,
      17   ,
      17   ,
      18   ,
      19   ,
      24   ,
      25   ,
      25   ,
      23   ,
      23   ,
      23   ,
      23   ,
      23   ,
      23   ,
      14   ,
      14   ,
      14   ,
      14   ,
      15   ,
      16   ,
      16   ,
      16   ,
      14   ,
      13   ,
      12   ,
      11   ,
      12   ,
      11   ,
      11   ,
      18   ,
      25   ,
      24   ,
      23   ,
      22   ,
      23   ,
      23   ,
      22   ,
      23   ,
      15   ,
      14   ,
      13   ,
      16   ,
      14   ,
      14   ,
      15   ,
      15   ,
      15   ,
      15   ,
      13   ,
      13   ,
      12   ,
      12   ,
      11   ,
      18   ,
      36   ,
      21   ,
      21   ,
      21   ,
      21   ,
      21   ,
      21   ,
      20   ,
      14   ,
      16   ,
      25   ,
      28   ,
      26   ,
      28   ,
      28   ,
      31   ,
      29   ,
      26   ,
      25   ,
      27   ,
      26   ,
      28   ,
      26   ,
      30   ,
      32   ,
      26   ,
      23   ,
      22   ,
      23   ,
      22   ,
      22   ,
      22   ,
      16   ,
      18   ,
      39   ,
      48   ,
      47   ,
      49   ,
      52   ,
      39   ,
      29   ,
      27   ,
      25   ,
      26   ,
      25   ,
      25   ,
      24   ,
      28   ,
      30   ,
      27   ,
      25   ,
      25   ,
      25   ,
      24   ,
      26   ,
      25   ,
      18   ,
      20   ,
      24   ,
      29   ,
      30   ,
      32   ,
      31   ,
      32   ,
      30   ,
      24   ,
      23   ,
      23   ,
      23   ,
      23   ,
      22   ,
      27   ,
      31   ,
      26   ,
      22   ,
      22   ,
      22   ,
      22   ,
      22   ,
      21   ,
      15   ,
      20   ,
      24   ,
      28   ,
      30   ,
      31   ,
      30   ,
      30   ,
      29   ,
      28   ,
      24   ,
      24   ,
      25   ,
      24   ,
      23   ,
      28   ,
      30   ,
      25   ,
      23   ,
      22   ,
      23   ,
      22   ,
      22   ,
      22   ,
      16   ,
      19   ,
      24   ,
      29   ,
      29   ,
      29   ,
      27   ,
      29   ,
      26   ,
      22   ,
      21   ,
      18   ,
      16   ,
      16   ,
      16   ,
      24   ,
      24   ,
      22   ,
      18   ,
      18   ,
      18   ,
      18   ,
      19   ,
      18   ,
      12   ,
      31   ,
      8    ,
      9    ,
      11   ,
      11   ,
      10   ,
      11   ,
      8    ,
      8    ,
      8    ,
      7    ,
      7    ,
      7    ,
      8    ,
      15   ,
      18   ,
      19   ,
      18   ,
      18   ,
      18   ,
      18   ,
      17   ,
      18   ,
      12   ,
      13   ,
      13   ,
      13   ,
      12   ,
      13   ,
      9    ,
      10   ,
      9    ,
      8    ,
      8    ,
      8    ,
      8    ,
      7    ,
      8    ,
      15   ,
      19   ,
      20   ,
      18   ,
      18   ,
      18   ,
      18   ,
      19   ,
      18   ,
      12   ,
      8    ,
      10   ,
      11   ,
      11   ,
      10   ,
      11   ,
      11   ,
      10   ,
      9    ,
      9    ,
      9    ,
      11   ,
      11   ,
      9    ,
      17   ,
      30   ,
      22   ,
      18   ,
      18   ,
      17   ,
      19   ,
      18   ,
      18   ,
      12   ,
      15   ,
      31   ,
      38   ,
      43   ,
      37   ,
      38   ,
      36   ,
      35   ,
      21   ,
      18   ,
      15   ,
      19   ,
      21   ,
      18   ,
      25   ,
      46   ,
      19   ,
      18   ,
      18   ,
      17   ,
      18   ,
      18   ,
      18   ,
      12   ,
      18   ,
      40   ,
      40   ,
      37   ,
      40   ,
      40   ,
      42   ,
      52   ,
      24   ,
      23   ,
      20   ,
      22   ,
      25   ,
      22   ,
      25   ,
      26   ,
      20   ,
      18   ,
      17   ,
      18   ,
      18   ,
      18   ,
      18   ,
      12   ,
      15   ,
      23   ,
      39   ,
      41   ,
      38   ,
      40   ,
      38   ,
      35   ,
      35   ,
      31   ,
      22   ,
      19   ,
      19   ,
      16   ,
      20   ,
      42   ,
      19   ,
      17   ,
      18   ,
      18   ,
      17   ,
      18   ,
      18   ,
      11   ,
      22   ,
      33   ,
      35   ,
      30   ,
      24   ,
      27   ,
      30   ,
      21   ,
      19   ,
      19   ,
      12   ,
      11   ,
      11   ,
      12   ,
      19   ,
      39   ,
      19   ,
      18   ,
      17   ,
      18   ,
      18   ,
      18   ,
      18   ,
      12   ,
      8    ,
      8    ,
      8    ,
      10   ,
      8    ,
      9    ,
      9    ,
      9    ,
      8    ,
      9    ,
      19   ,
      42   ,
      8    ,
      7    ,
      15   ,
      19   ,
      31   ,
      18   ,
      18   ,
      18   ,
      17   ,
      18   ,
      17   ,
      13   ,
      20   ,
      9    ,
      8    ,
      10   ,
      8    ,
      9    ,
      9    ,
      9    ,
      8    ,
      7    ,
      8    ,
      6    ,
      8    ,
      7    ,
      15   ,
      19   ,
      49   ,
    ];
    return calcula()[0];
  }

  function agost(){//2022
    periodes=[
      new Periode(tipus_mesos[ago],new Date(Date.UTC(2022,ago,01)),new Date(Date.UTC(2022,set,01)))
    ];

    //preus per kW per cada període
    eurKWP1 = 31*0.039562; //€/kW
    eurKWP2 = 31*0.030486; //€/kW
    eurKWP3 = 31*0.014036; //€/kW
    eurKWP4 = 31*0.011610; //€/kW
    eurKWP5 = 31*0.007007; //€/kW
    eurKWP6 = 31*0.004878; //€/kW

    //preus per kWh per cada període
    eurKWhP1 = 0;        //€/kWh
    eurKWhP2 = 0;        //€/kWh
    eurKWhP3 = 0.217606; //€/kWh
    eurKWhP4 = 0.209702; //€/kWh
    eurKWhP5 = 0;        //€/kWh
    eurKWhP6 = 0.192587; //€/kWh

    //altres
    tax_alq     = 30.51;   //€
    preu_topall = 0.000000; //eur/kWh
    tax_im1     = 0.00500; //impost electricitat
    tax_iva     = 0.21;

    //coses extra que surten a la factura
    //"regularització financiació BS"
    let extra = 3.76*(1+tax_im1)*(1+tax_iva);

    energy=[
      18   ,
      18   ,
      17   ,
      18   ,
      18   ,
      18   ,
      12   ,
      22   ,
      17   ,
      20   ,
      23   ,
      21   ,
      26   ,
      23   ,
      22   ,
      18   ,
      17   ,
      17   ,
      26   ,
      18   ,
      14   ,
      44   ,
      24   ,
      20   ,
      19   ,
      19   ,
      19   ,
      20   ,
      20   ,
      19   ,
      15   ,
      15   ,
      19   ,
      26   ,
      27   ,
      25   ,
      27   ,
      22   ,
      18   ,
      17   ,
      17   ,
      34   ,
      17   ,
      18   ,
      18   ,
      22   ,
      23   ,
      19   ,
      18   ,
      17   ,
      18   ,
      18   ,
      18   ,
      18   ,
      14   ,
      17   ,
      27   ,
      32   ,
      34   ,
      33   ,
      31   ,
      28   ,
      27   ,
      21   ,
      15   ,
      14   ,
      13   ,
      13   ,
      13   ,
      20   ,
      26   ,
      18   ,
      18   ,
      18   ,
      18   ,
      18   ,
      18   ,
      18   ,
      14   ,
      18   ,
      23   ,
      29   ,
      29   ,
      27   ,
      27   ,
      27   ,
      28   ,
      19   ,
      18   ,
      19   ,
      17   ,
      16   ,
      19   ,
      26   ,
      29   ,
      19   ,
      18   ,
      18   ,
      18   ,
      18   ,
      18   ,
      18   ,
      14   ,
      12   ,
      19   ,
      21   ,
      20   ,
      22   ,
      22   ,
      19   ,
      23   ,
      19   ,
      27   ,
      16   ,
      14   ,
      13   ,
      11   ,
      19   ,
      21   ,
      18   ,
      18   ,
      18   ,
      18   ,
      18   ,
      18   ,
      18   ,
      14   ,
      9    ,
      11   ,
      12   ,
      11   ,
      12   ,
      12   ,
      10   ,
      8    ,
      9    ,
      8    ,
      7    ,
      7    ,
      8    ,
      7    ,
      16   ,
      22   ,
      21   ,
      18   ,
      18   ,
      17   ,
      18   ,
      18   ,
      18   ,
      15   ,
      8    ,
      9    ,
      9    ,
      10   ,
      10   ,
      8    ,
      9    ,
      9    ,
      7    ,
      8    ,
      7    ,
      8    ,
      7    ,
      7    ,
      17   ,
      18   ,
      19   ,
      18   ,
      18   ,
      17   ,
      17   ,
      18   ,
      18   ,
      14   ,
      15   ,
      19   ,
      20   ,
      18   ,
      20   ,
      17   ,
      18   ,
      22   ,
      14   ,
      14   ,
      16   ,
      19   ,
      14   ,
      12   ,
      20   ,
      22   ,
      20   ,
      18   ,
      18   ,
      18   ,
      17   ,
      18   ,
      18   ,
      15   ,
      13   ,
      17   ,
      21   ,
      24   ,
      21   ,
      23   ,
      24   ,
      23   ,
      20   ,
      20   ,
      18   ,
      19   ,
      16   ,
      17   ,
      26   ,
      24   ,
      21   ,
      18   ,
      17   ,
      18   ,
      19   ,
      18   ,
      18   ,
      15   ,
      14   ,
      20   ,
      20   ,
      19   ,
      28   ,
      30   ,
      29   ,
      21   ,
      14   ,
      14   ,
      15   ,
      18   ,
      14   ,
      13   ,
      22   ,
      23   ,
      19   ,
      18   ,
      18   ,
      18   ,
      18   ,
      18   ,
      18   ,
      15   ,
      29   ,
      42   ,
      43   ,
      43   ,
      46   ,
      46   ,
      44   ,
      36   ,
      21   ,
      37   ,
      45   ,
      32   ,
      14   ,
      14   ,
      23   ,
      26   ,
      25   ,
      19   ,
      20   ,
      19   ,
      19   ,
      20   ,
      19   ,
      17   ,
      13   ,
      17   ,
      20   ,
      25   ,
      50   ,
      50   ,
      25   ,
      23   ,
      20   ,
      19   ,
      25   ,
      18   ,
      11   ,
      10   ,
      21   ,
      26   ,
      23   ,
      18   ,
      17   ,
      18   ,
      18   ,
      18   ,
      18   ,
      15   ,
      9    ,
      9    ,
      9    ,
      11   ,
      10   ,
      10   ,
      9    ,
      7    ,
      8    ,
      8    ,
      8    ,
      8    ,
      8    ,
      8    ,
      18   ,
      20   ,
      19   ,
      20   ,
      19   ,
      19   ,
      19   ,
      19   ,
      18   ,
      17   ,
      8    ,
      9    ,
      8    ,
      11   ,
      12   ,
      9    ,
      9    ,
      8    ,
      8    ,
      7    ,
      7    ,
      7    ,
      6    ,
      8    ,
      19   ,
      19   ,
      19   ,
      19   ,
      18   ,
      19   ,
      19   ,
      19   ,
      18   ,
      17   ,
      7    ,
      9    ,
      9    ,
      10   ,
      10   ,
      9    ,
      10   ,
      10   ,
      8    ,
      7    ,
      8    ,
      7    ,
      8    ,
      8    ,
      19   ,
      19   ,
      18   ,
      18   ,
      18   ,
      17   ,
      19   ,
      17   ,
      18   ,
      16   ,
      13   ,
      20   ,
      21   ,
      25   ,
      35   ,
      36   ,
      25   ,
      24   ,
      19   ,
      21   ,
      30   ,
      51   ,
      50   ,
      34   ,
      41   ,
      39   ,
      22   ,
      18   ,
      18   ,
      17   ,
      17   ,
      18   ,
      17   ,
      16   ,
      15   ,
      21   ,
      19   ,
      24   ,
      19   ,
      34   ,
      28   ,
      24   ,
      17   ,
      13   ,
      30   ,
      45   ,
      44   ,
      30   ,
      35   ,
      28   ,
      20   ,
      18   ,
      18   ,
      18   ,
      18   ,
      18   ,
      17   ,
      18   ,
      14   ,
      18   ,
      31   ,
      25   ,
      25   ,
      29   ,
      21   ,
      19   ,
      16   ,
      17   ,
      32   ,
      43   ,
      42   ,
      23   ,
      23   ,
      20   ,
      19   ,
      18   ,
      18   ,
      17   ,
      18   ,
      17   ,
      17   ,
      17   ,
      12   ,
      15   ,
      20   ,
      44   ,
      54   ,
      59   ,
      38   ,
      23   ,
      19   ,
      18   ,
      35   ,
      46   ,
      46   ,
      26   ,
      28   ,
      23   ,
      21   ,
      18   ,
      17   ,
      18   ,
      17   ,
      17   ,
      18   ,
      17   ,
      9    ,
      8    ,
      12   ,
      23   ,
      13   ,
      11   ,
      10   ,
      7    ,
      9    ,
      8    ,
      8    ,
      7    ,
      8    ,
      8    ,
      19   ,
      19   ,
      18   ,
      18   ,
      17   ,
      18   ,
      18   ,
      18   ,
      17   ,
      18   ,
      7    ,
      7    ,
      7    ,
      7    ,
      7    ,
      6    ,
      6    ,
      6    ,
      8    ,
      7    ,
      7    ,
      7    ,
      7    ,
      8    ,
      19   ,
      18   ,
      19   ,
      17   ,
      18   ,
      17   ,
      18   ,
      17   ,
      18   ,
      17   ,
      15   ,
      22   ,
      27   ,
      47   ,
      48   ,
      44   ,
      30   ,
      22   ,
      23   ,
      34   ,
      39   ,
      51   ,
      49   ,
      50   ,
      59   ,
      55   ,
      62   ,
      18   ,
      18   ,
      18   ,
      18   ,
      17   ,
      18   ,
      17   ,
      14   ,
      18   ,
      19   ,
      47   ,
      57   ,
      43   ,
      28   ,
      26   ,
      22   ,
      34   ,
      34   ,
      46   ,
      48   ,
      50   ,
      59   ,
      45   ,
      22   ,
      17   ,
      18   ,
      17   ,
      17   ,
      18   ,
      17   ,
      17   ,
      17   ,
      22   ,
      27   ,
      30   ,
      56   ,
      52   ,
      31   ,
      26   ,
      23   ,
      30   ,
      37   ,
      45   ,
      48   ,
      51   ,
      58   ,
      46   ,
      34   ,
      17   ,
      18   ,
      17   ,
      18   ,
      17   ,
      17   ,
      18   ,
      16   ,
      21   ,
      25   ,
      24   ,
      42   ,
      63   ,
      60   ,
      39   ,
      29   ,
      33   ,
      30   ,
      31   ,
      28   ,
      30   ,
      40   ,
      26   ,
      21   ,
      17   ,
      18   ,
      17   ,
      17   ,
      17   ,
      17   ,
      17   ,
      17   ,
      23   ,
      20   ,
      49   ,
      41   ,
      21   ,
      21   ,
      20   ,
      23   ,
      31   ,
      31   ,
      31   ,
      29   ,
      33   ,
      40   ,
      29   ,
      20   ,
      17   ,
      17   ,
      17   ,
      18   ,
      17   ,
      17   ,
      18   ,
      9    ,
      9    ,
      9    ,
      10   ,
      11   ,
      7    ,
      7    ,
      7    ,
      6    ,
      6    ,
      6    ,
      8    ,
      14   ,
      18   ,
      23   ,
      21   ,
      19   ,
      17   ,
      18   ,
      17   ,
      16   ,
      18   ,
      17   ,
      17   ,
      9    ,
      7    ,
      11   ,
      18   ,
      25   ,
      37   ,
      42   ,
      34   ,
      11   ,
      11   ,
      13   ,
      12   ,
      12   ,
      16   ,
      22   ,
      22   ,
      22   ,
      16   ,
      18   ,
      17   ,
      17   ,
      17   ,
      16   ,
      18   ,
      16   ,
      20   ,
      26   ,
      51   ,
      60   ,
      48   ,
      30   ,
      29   ,
      28   ,
      58   ,
      54   ,
      52   ,
      55   ,
      45   ,
      45   ,
      39   ,
      23   ,
      21   ,
      21   ,
      20   ,
      20   ,
      20   ,
      21   ,
      21   ,
      17   ,
      21   ,
      28   ,
      59   ,
      55   ,
      62   ,
      60   ,
      40   ,
      32   ,
      57   ,
      52   ,
      22   ,
      20   ,
      34   ,
      41   ,
      43   ,
      43   ,
      24   ,
      20   ,
      21   ,
      21   ,
      21   ,
      21   ,
      20   ,
      19   ,
      34   ,
      41   ,
      58   ,
      56   ,
      39   ,
      26   ,
      27   ,
      27   ,
      24   ,
      28   ,
      38   ,
      40   ,
      44   ,
      46   ,
      39   ,
      25   ,
    ];

    let cost = calcula()[0]; //object
    cost.total_amb_iva+=extra; //€
    return cost; //object
  }

  function setembre(){//2022
    periodes=[
      new Periode(tipus_mesos[set],new Date(Date.UTC(2022,set,01)),new Date(Date.UTC(2022,oct,01)))
    ];

    //preus per kW per cada període
    eurKWP1 = 30*0.039562; //€/kW
    eurKWP2 = 30*0.030486; //€/kW
    eurKWP3 = 30*0.014036; //€/kW
    eurKWP4 = 30*0.011610; //€/kW
    eurKWP5 = 30*0.007007; //€/kW
    eurKWP6 = 30*0.004878; //€/kW

    //preus per kWh per cada període
    eurKWhP1 = 0;        //€/kWh
    eurKWhP2 = 0;        //€/kWh
    eurKWhP3 = 0.217606; //€/kWh
    eurKWhP4 = 0.209702; //€/kWh
    eurKWhP5 = 0;        //€/kWh
    eurKWhP6 = 0.192587; //€/kWh

    //altres
    tax_alq     = 30.51; //€
    preu_topall = 0.15836; //eur/kWh
    tax_im1     = 0.00500; //impost electricitat
    tax_iva     = 0.21;
    energy=[
      22   ,
      21   ,
      21   ,
      22   ,
      21   ,
      21   ,
      21   ,
      19   ,
      17   ,
      28   ,
      50   ,
      51   ,
      46   ,
      24   ,
      25   ,
      19   ,
      19   ,
      37   ,
      53   ,
      46   ,
      45   ,
      50   ,
      33   ,
      23   ,
      20   ,
      21   ,
      21   ,
      21   ,
      20   ,
      20   ,
      21   ,
      21   ,
      24   ,
      30   ,
      51   ,
      52   ,
      49   ,
      49   ,
      24   ,
      17   ,
      23   ,
      34   ,
      57   ,
      41   ,
      46   ,
      45   ,
      35   ,
      23   ,
      21   ,
      21   ,
      21   ,
      21   ,
      20   ,
      21   ,
      20   ,
      15   ,
      24   ,
      40   ,
      41   ,
      35   ,
      45   ,
      36   ,
      11   ,
      11   ,
      11   ,
      11   ,
      11   ,
      11   ,
      16   ,
      19   ,
      19   ,
      19   ,
      17   ,
      17   ,
      17   ,
      17   ,
      17   ,
      17   ,
      16   ,
      15   ,
      8    ,
      9    ,
      12   ,
      12   ,
      10   ,
      8    ,
      8    ,
      7    ,
      8    ,
      8    ,
      8    ,
      8    ,
      15   ,
      19   ,
      19   ,
      19   ,
      16   ,
      18   ,
      16   ,
      17   ,
      17   ,
      17   ,
      17   ,
      27   ,
      26   ,
      36   ,
      26   ,
      30   ,
      43   ,
      26   ,
      22   ,
      17   ,
      84   ,
      23   ,
      53   ,
      52   ,
      45   ,
      42   ,
      37   ,
      35   ,
      18   ,
      17   ,
      17   ,
      17   ,
      17   ,
      17   ,
      18   ,
      26   ,
      22   ,
      20   ,
      46   ,
      51   ,
      52   ,
      53   ,
      32   ,
      19   ,
      18   ,
      32   ,
      37   ,
      39   ,
      45   ,
      47   ,
      49   ,
      46   ,
      20   ,
      17   ,
      16   ,
      17   ,
      17   ,
      16   ,
      17   ,
      23   ,
      18   ,
      23   ,
      49   ,
      51   ,
      52   ,
      51   ,
      39   ,
      22   ,
      16   ,
      30   ,
      42   ,
      41   ,
      47   ,
      50   ,
      38   ,
      32   ,
      20   ,
      17   ,
      17   ,
      17   ,
      16   ,
      17   ,
      18   ,
      23   ,
      19   ,
      20   ,
      20   ,
      44   ,
      47   ,
      46   ,
      27   ,
      19   ,
      15   ,
      29   ,
      45   ,
      42   ,
      46   ,
      47   ,
      42   ,
      31   ,
      17   ,
      18   ,
      17   ,
      17   ,
      17   ,
      17   ,
      18   ,
      25   ,
      23   ,
      39   ,
      51   ,
      54   ,
      33   ,
      24   ,
      22   ,
      19   ,
      32   ,
      51   ,
      101  ,
      96   ,
      80   ,
      47   ,
      40   ,
      24   ,
      20   ,
      21   ,
      21   ,
      20   ,
      20   ,
      21   ,
      20   ,
      16   ,
      11   ,
      14   ,
      14   ,
      18   ,
      15   ,
      11   ,
      11   ,
      12   ,
      18   ,
      19   ,
      19   ,
      20   ,
      25   ,
      23   ,
      22   ,
      23   ,
      20   ,
      20   ,
      20   ,
      20   ,
      20   ,
      20   ,
      20   ,
      16   ,
      11   ,
      12   ,
      14   ,
      14   ,
      11   ,
      10   ,
      11   ,
      10   ,
      19   ,
      19   ,
      20   ,
      18   ,
      27   ,
      23   ,
      25   ,
      21   ,
      20   ,
      20   ,
      21   ,
      21   ,
      20   ,
      20   ,
      21   ,
      27   ,
      25   ,
      25   ,
      55   ,
      51   ,
      31   ,
      25   ,
      25   ,
      21   ,
      22   ,
      30   ,
      40   ,
      47   ,
      54   ,
      48   ,
      42   ,
      38   ,
      24   ,
      21   ,
      22   ,
      21   ,
      20   ,
      21   ,
      23   ,
      42   ,
      42   ,
      48   ,
      62   ,
      57   ,
      60   ,
      56   ,
      38   ,
      22   ,
      46   ,
      51   ,
      53   ,
      50   ,
      50   ,
      48   ,
      41   ,
      28   ,
      17   ,
      17   ,
      17   ,
      17   ,
      17   ,
      17   ,
      20   ,
      36   ,
      35   ,
      41   ,
      60   ,
      60   ,
      58   ,
      55   ,
      38   ,
      34   ,
      33   ,
      36   ,
      36   ,
      39   ,
      51   ,
      52   ,
      50   ,
      43   ,
      19   ,
      20   ,
      19   ,
      20   ,
      19   ,
      19   ,
      23   ,
      38   ,
      38   ,
      38   ,
      35   ,
      36   ,
      32   ,
      24   ,
      22   ,
      20   ,
      18   ,
      29   ,
      43   ,
      41   ,
      50   ,
      49   ,
      42   ,
      28   ,
      18   ,
      17   ,
      18   ,
      17   ,
      17   ,
      18   ,
      21   ,
      27   ,
      22   ,
      25   ,
      53   ,
      58   ,
      57   ,
      54   ,
      39   ,
      33   ,
      29   ,
      32   ,
      40   ,
      39   ,
      49   ,
      50   ,
      29   ,
      21   ,
      21   ,
      20   ,
      21   ,
      20   ,
      21   ,
      20   ,
      20   ,
      23   ,
      28   ,
      66   ,
      93   ,
      99   ,
      102  ,
      100  ,
      36   ,
      40   ,
      83   ,
      82   ,
      85   ,
      80   ,
      42   ,
      34   ,
      34   ,
      26   ,
      19   ,
      19   ,
      18   ,
      19   ,
      18   ,
      19   ,
      22   ,
      28   ,
      20   ,
      31   ,
      78   ,
      80   ,
      64   ,
      19   ,
      10   ,
      8    ,
      14   ,
      15   ,
      16   ,
      15   ,
      26   ,
      19   ,
      19   ,
      18   ,
      16   ,
      17   ,
      16   ,
      17   ,
      16   ,
      16   ,
      18   ,
      33   ,
      23   ,
      21   ,
      32   ,
      52   ,
      60   ,
      59   ,
      37   ,
      28   ,
      46   ,
      56   ,
      52   ,
      47   ,
      52   ,
      51   ,
      47   ,
      40   ,
      21   ,
      18   ,
      19   ,
      19   ,
      19   ,
      19   ,
      20   ,
      34   ,
      22   ,
      27   ,
      52   ,
      55   ,
      62   ,
      57   ,
      31   ,
      19   ,
      18   ,
      31   ,
      44   ,
      42   ,
      50   ,
      47   ,
      39   ,
      32   ,
      17   ,
      16   ,
      17   ,
      17   ,
      17   ,
      17   ,
      17   ,
      35   ,
      33   ,
      38   ,
      42   ,
      48   ,
      43   ,
      39   ,
      37   ,
      37   ,
      39   ,
      44   ,
      40   ,
      38   ,
      47   ,
      39   ,
      36   ,
      22   ,
      17   ,
      18   ,
      19   ,
      17   ,
      18   ,
      18   ,
      18   ,
      36   ,
      38   ,
      47   ,
      52   ,
      53   ,
      59   ,
      56   ,
      48   ,
      45   ,
      44   ,
      50   ,
      46   ,
      43   ,
      53   ,
      50   ,
      39   ,
      27   ,
      23   ,
      23   ,
      22   ,
      22   ,
      22   ,
      22   ,
      22   ,
      40   ,
      43   ,
      55   ,
      61   ,
      65   ,
      71   ,
      67   ,
      78   ,
      80   ,
      84   ,
      91   ,
      85   ,
      89   ,
      83   ,
      66   ,
      44   ,
      34   ,
      23   ,
      22   ,
      22   ,
      23   ,
      22   ,
      24   ,
      41   ,
      45   ,
      72   ,
      88   ,
      98   ,
      105  ,
      107  ,
      111  ,
      116  ,
      112  ,
      111  ,
      104  ,
      107  ,
      110  ,
      88   ,
      66   ,
      40   ,
      33   ,
      30   ,
      25   ,
      26   ,
      24   ,
      25   ,
      24   ,
      50   ,
      66   ,
      71   ,
      92   ,
      91   ,
      98   ,
      99   ,
      99   ,
      97   ,
      61   ,
      34   ,
      30   ,
      28   ,
      30   ,
      31   ,
      27   ,
      21   ,
      21   ,
      16   ,
      17   ,
      17   ,
      18   ,
      17   ,
      17   ,
      19   ,
      30   ,
      31   ,
      35   ,
      39   ,
      40   ,
      47   ,
      32   ,
      30   ,
      44   ,
      65   ,
      61   ,
      46   ,
      51   ,
      57   ,
      56   ,
      49   ,
      41   ,
      20   ,
      20   ,
      19   ,
      19   ,
      19   ,
      20   ,
      20   ,
      43   ,
      41   ,
      47   ,
      63   ,
      67   ,
      72   ,
      61   ,
      33   ,
      25   ,
      24   ,
      32   ,
      43   ,
      47   ,
      51   ,
      51   ,
      40   ,
      24   ,
      19   ,
      18   ,
      18   ,
      18   ,
      17   ,
      18   ,
      17   ,
      36   ,
      36   ,
      49   ,
      60   ,
      63   ,
      69   ,
      76   ,
      31   ,
      26   ,
      25   ,
      50   ,
      62   ,
      104  ,
      169  ,
      198  ,
      195  ,
      124  ,
      60   ,
      35   ,
      20   ,
      21   ,
      20   ,
      21   ,
      21   ,
      38   ,
      34   ,
      38   ,
      56   ,
      54   ,
      54   ,
      35   ,
      26   ,
      34   ,
      49   ,
      55   ,
      49   ,
      49   ,
      52   ,
      53   ,
      48   ,
      31   ,
      18   ,
      18   ,
      17   ,
      18   ,
      17   ,
      18   ,
      18   ,
      36   ,
      33   ,
      38   ,
      53   ,
      49   ,
      53   ,
      44   ,
      28   ,
      24   ,
      27   ,
      59   ,
      116  ,
      127  ,
      194  ,
      201  ,
      195  ,
      66   ,
    ];
    return calcula()[0];
  }

  function octubre(){//2022
    periodes=[
      new Periode(tipus_mesos[oct],new Date(Date.UTC(2022,oct,01)),new Date(Date.UTC(2022,nov,01)))
    ];
    //preus per kW per cada període
    eurKWP1 = 31*0.039562; //€/kW
    eurKWP2 = 31*0.030486; //€/kW
    eurKWP3 = 31*0.014036; //€/kW
    eurKWP4 = 31*0.011610; //€/kW
    eurKWP5 = 31*0.007007; //€/kW
    eurKWP6 = 31*0.004878; //€/kW

    //preus per kWh per cada període
    eurKWhP1 = 0;        //€/kWh
    eurKWhP2 = 0;        //€/kWh
    eurKWhP3 = 0; //€/kWh
    eurKWhP4 = 0.271751; //€/kWh
    eurKWhP5 = 0.262874; //€/kWh
    eurKWhP6 = 0.254636; //€/kWh

    //altres
    tax_alq     = 30.51; //€
    preu_topall = 0.15836; //eur/kWh
    tax_im1     = 0.00500; //impost electricitat
    tax_iva     = 0.21;
    energy=[
      23   ,
      19   ,
      18   ,
      19   ,
      18   ,
      19   ,
      19   ,
      35   ,
      28   ,
      32   ,
      27   ,
      21   ,
      19   ,
      16   ,
      9    ,
      15   ,
      38   ,
      38   ,
      37   ,
      18   ,
      27   ,
      23   ,
      20   ,
      19   ,
      16   ,
      17   ,
      17   ,
      17   ,
      17   ,
      17   ,
      18   ,
      23   ,
      14   ,
      17   ,
      33   ,
      102  ,
      99   ,
      95   ,
      47   ,
      14   ,
      19   ,
      24   ,
      48   ,
      54   ,
      54   ,
      24   ,
      20   ,
      20   ,
      17   ,
      18   ,
      17   ,
      17   ,
      17   ,
      17   ,
      18   ,
      40   ,
      42   ,
      40   ,
      53   ,
      50   ,
      48   ,
      26   ,
      25   ,
      26   ,
      39   ,
      55   ,
      43   ,
      49   ,
      54   ,
      52   ,
      46   ,
      36   ,
      19   ,
      17   ,
      18   ,
      17   ,
      17   ,
      18   ,
      19   ,
      40   ,
      34   ,
      43   ,
      53   ,
      63   ,
      62   ,
      51   ,
      29   ,
      18   ,
      18   ,
      41   ,
      43   ,
      50   ,
      56   ,
      54   ,
      67   ,
      37   ,
      19   ,
      19   ,
      19   ,
      18   ,
      20   ,
      19   ,
      19   ,
      41   ,
      34   ,
      41   ,
      57   ,
      57   ,
      62   ,
      43   ,
      24   ,
      21   ,
      31   ,
      45   ,
      110  ,
      187  ,
      201  ,
      134  ,
      74   ,
      44   ,
      19   ,
      18   ,
      19   ,
      19   ,
      18   ,
      19   ,
      20   ,
      41   ,
      33   ,
      35   ,
      38   ,
      50   ,
      55   ,
      52   ,
      32   ,
      23   ,
      30   ,
      50   ,
      40   ,
      49   ,
      52   ,
      49   ,
      45   ,
      33   ,
      18   ,
      18   ,
      18   ,
      18   ,
      18   ,
      18   ,
      19   ,
      40   ,
      31   ,
      39   ,
      54   ,
      50   ,
      38   ,
      26   ,
      22   ,
      26   ,
      28   ,
      40   ,
      43   ,
      49   ,
      55   ,
      50   ,
      47   ,
      34   ,
      18   ,
      18   ,
      18   ,
      18   ,
      18   ,
      18   ,
      19   ,
      36   ,
      25   ,
      28   ,
      30   ,
      34   ,
      23   ,
      20   ,
      13   ,
      17   ,
      27   ,
      49   ,
      54   ,
      58   ,
      60   ,
      56   ,
      54   ,
      35   ,
      18   ,
      17   ,
      19   ,
      18   ,
      18   ,
      18   ,
      18   ,
      26   ,
      11   ,
      10   ,
      16   ,
      18   ,
      18   ,
      19   ,
      12   ,
      17   ,
      17   ,
      18   ,
      18   ,
      25   ,
      30   ,
      25   ,
      22   ,
      21   ,
      18   ,
      18   ,
      17   ,
      18   ,
      17   ,
      18   ,
      19   ,
      39   ,
      31   ,
      34   ,
      31   ,
      50   ,
      54   ,
      49   ,
      35   ,
      20   ,
      21   ,
      35   ,
      43   ,
      51   ,
      52   ,
      53   ,
      43   ,
      32   ,
      19   ,
      19   ,
      18   ,
      19   ,
      18   ,
      19   ,
      20   ,
      35   ,
      28   ,
      31   ,
      33   ,
      43   ,
      51   ,
      49   ,
      45   ,
      20   ,
      20   ,
      24   ,
      40   ,
      50   ,
      54   ,
      50   ,
      47   ,
      29   ,
      19   ,
      19   ,
      18   ,
      18   ,
      19   ,
      18   ,
      19   ,
      32   ,
      25   ,
      17   ,
      38   ,
      47   ,
      45   ,
      45   ,
      34   ,
      27   ,
      43   ,
      42   ,
      43   ,
      50   ,
      54   ,
      39   ,
      22   ,
      22   ,
      20   ,
      21   ,
      21   ,
      21   ,
      21   ,
      20   ,
      22   ,
      35   ,
      19   ,
      20   ,
      29   ,
      30   ,
      31   ,
      33   ,
      20   ,
      20   ,
      20   ,
      34   ,
      40   ,
      50   ,
      50   ,
      45   ,
      38   ,
      24   ,
      17   ,
      17   ,
      17   ,
      17   ,
      17   ,
      17   ,
      17   ,
      22   ,
      32   ,
      45   ,
      48   ,
      53   ,
      54   ,
      54   ,
      52   ,
      47   ,
      45   ,
      46   ,
      35   ,
      43   ,
      48   ,
      46   ,
      42   ,
      34   ,
      21   ,
      20   ,
      20   ,
      19   ,
      20   ,
      20   ,
      22   ,
      37   ,
      39   ,
      42   ,
      61   ,
      58   ,
      54   ,
      52   ,
      35   ,
      23   ,
      54   ,
      146  ,
      183  ,
      189  ,
      86   ,
      64   ,
      65   ,
      64   ,
      58   ,
      34   ,
      25   ,
      26   ,
      24   ,
      25   ,
      27   ,
      46   ,
      49   ,
      57   ,
      68   ,
      119  ,
      167  ,
      190  ,
      148  ,
      41   ,
      29   ,
      27   ,
      24   ,
      33   ,
      32   ,
      24   ,
      25   ,
      20   ,
      19   ,
      18   ,
      18   ,
      19   ,
      18   ,
      18   ,
      19   ,
      37   ,
      40   ,
      41   ,
      55   ,
      56   ,
      50   ,
      29   ,
      19   ,
      21   ,
      41   ,
      57   ,
      45   ,
      51   ,
      51   ,
      57   ,
      60   ,
      46   ,
      17   ,
      18   ,
      17   ,
      17   ,
      18   ,
      17   ,
      19   ,
      63   ,
      66   ,
      40   ,
      57   ,
      57   ,
      54   ,
      56   ,
      33   ,
      20   ,
      19   ,
      31   ,
      41   ,
      53   ,
      61   ,
      47   ,
      40   ,
      29   ,
      18   ,
      18   ,
      18   ,
      18   ,
      17   ,
      17   ,
      18   ,
      33   ,
      36   ,
      39   ,
      54   ,
      58   ,
      50   ,
      51   ,
      38   ,
      36   ,
      46   ,
      60   ,
      76   ,
      145  ,
      212  ,
      216  ,
      118  ,
      44   ,
      22   ,
      19   ,
      20   ,
      21   ,
      19   ,
      20   ,
      21   ,
      37   ,
      36   ,
      40   ,
      51   ,
      53   ,
      40   ,
      20   ,
      19   ,
      18   ,
      18   ,
      37   ,
      47   ,
      56   ,
      55   ,
      52   ,
      49   ,
      33   ,
      17   ,
      18   ,
      17   ,
      17   ,
      17   ,
      17   ,
      18   ,
      31   ,
      30   ,
      38   ,
      47   ,
      54   ,
      53   ,
      57   ,
      26   ,
      15   ,
      16   ,
      35   ,
      41   ,
      56   ,
      54   ,
      52   ,
      48   ,
      34   ,
      20   ,
      19   ,
      20   ,
      19   ,
      19   ,
      19   ,
      20   ,
      32   ,
      27   ,
      26   ,
      23   ,
      31   ,
      22   ,
      16   ,
      11   ,
      20   ,
      25   ,
      26   ,
      27   ,
      38   ,
      36   ,
      33   ,
      26   ,
      25   ,
      19   ,
      18   ,
      18   ,
      18   ,
      18   ,
      19   ,
      18   ,
      25   ,
      23   ,
      21   ,
      14   ,
      14   ,
      15   ,
      15   ,
      10   ,
      18   ,
      19   ,
      22   ,
      24   ,
      34   ,
      33   ,
      33   ,
      27   ,
      30   ,
      22   ,
      21   ,
      22   ,
      22   ,
      21   ,
      21   ,
      22   ,
      44   ,
      43   ,
      40   ,
      56   ,
      62   ,
      64   ,
      49   ,
      25   ,
      25   ,
      21   ,
      26   ,
      49   ,
      59   ,
      58   ,
      55   ,
      51   ,
      43   ,
      21   ,
      22   ,
      21   ,
      21   ,
      22   ,
      21   ,
      22   ,
      44   ,
      38   ,
      40   ,
      55   ,
      57   ,
      52   ,
      54   ,
      43   ,
      24   ,
      23   ,
      34   ,
      48   ,
      59   ,
      58   ,
      53   ,
      51   ,
      40   ,
      19   ,
      18   ,
      19   ,
      18   ,
      19   ,
      19   ,
      21   ,
      34   ,
      34   ,
      37   ,
      41   ,
      47   ,
      51   ,
      54   ,
      39   ,
      19   ,
      18   ,
      29   ,
      44   ,
      53   ,
      52   ,
      51   ,
      46   ,
      31   ,
      17   ,
      17   ,
      18   ,
      17   ,
      17   ,
      17   ,
      19   ,
      36   ,
      35   ,
      25   ,
      27   ,
      16   ,
      16   ,
      19   ,
      17   ,
      14   ,
      15   ,
      31   ,
      43   ,
      54   ,
      52   ,
      49   ,
      43   ,
      26   ,
      19   ,
      18   ,
      18   ,
      17   ,
      18   ,
      17   ,
      19   ,
      36   ,
      38   ,
      40   ,
      50   ,
      54   ,
      56   ,
      51   ,
      27   ,
      16   ,
      18   ,
      30   ,
      41   ,
      47   ,
      49   ,
      47   ,
      46   ,
      42   ,
      25   ,
      22   ,
      21   ,
      21   ,
      21   ,
      22   ,
      23   ,
      38   ,
      31   ,
      21   ,
      51   ,
      48   ,
      51   ,
      50   ,
      28   ,
      18   ,
      18   ,
      43   ,
      102  ,
      202  ,
      201  ,
      195  ,
      98   ,
      66   ,
      28   ,
      29   ,
      28   ,
      28   ,
      26   ,
      26   ,
      27   ,
      27   ,
      48   ,
      42   ,
      41   ,
      50   ,
      54   ,
      40   ,
      37   ,
      33   ,
      36   ,
      41   ,
      77   ,
      166  ,
      202  ,
      204  ,
      193  ,
      73   ,
      30   ,
      23   ,
      23   ,
      22   ,
      23   ,
      22   ,
      22   ,
      24   ,
      45   ,
      45   ,
      48   ,
      57   ,
      54   ,
      55   ,
      33   ,
      22   ,
      19   ,
      42   ,
      59   ,
      54   ,
      53   ,
      54   ,
      51   ,
      43   ,
      35   ,
    ];
    return calcula()[0];
  }

  function novembre(){//2022
    periodes=[
      new Periode(tipus_mesos[nov],new Date(Date.UTC(2022,nov,01)),new Date(Date.UTC(2022,des,01)))
    ];
    //preus per kW per cada període
    eurKWP1 = 30*0.039562; //€/kW
    eurKWP2 = 30*0.030486; //€/kW
    eurKWP3 = 30*0.014036; //€/kW
    eurKWP4 = 30*0.011610; //€/kW
    eurKWP5 = 30*0.007007; //€/kW
    eurKWP6 = 30*0.004878; //€/kW

    //preus per kWh per cada període
    eurKWhP1 = 0;        //€/kWh
    eurKWhP2 = 0.296834; //€/kWh
    eurKWhP3 = 0.280492; //€/kWh
    eurKWhP4 = 0; //€/kWh
    eurKWhP5 = 0; //€/kWh
    eurKWhP6 = 0.254636; //€/kWh

    //altres
    tax_alq     = 29.53; //€
    preu_topall = 0.08237; //eur/kWh
    tax_im1     = 0.00500; //impost electricitat
    tax_iva     = 0.21;
    energy=[
      21   ,
      21   ,
      22   ,
      21   ,
      21   ,
      22   ,
      21   ,
      22   ,
      15   ,
      18   ,
      43   ,
      51   ,
      47   ,
      45   ,
      15   ,
      19   ,
      19   ,
      16   ,
      25   ,
      24   ,
      24   ,
      24   ,
      26   ,
      23   ,
      21   ,
      21   ,
      20   ,
      20   ,
      21   ,
      20   ,
      21   ,
      32   ,
      23   ,
      33   ,
      60   ,
      56   ,
      53   ,
      57   ,
      41   ,
      24   ,
      26   ,
      56   ,
      80   ,
      111  ,
      183  ,
      210  ,
      185  ,
      67   ,
      33   ,
      23   ,
      23   ,
      22   ,
      22   ,
      22   ,
      25   ,
      38   ,
      33   ,
      37   ,
      37   ,
      37   ,
      29   ,
      23   ,
      24   ,
      19   ,
      25   ,
      44   ,
      57   ,
      57   ,
      56   ,
      52   ,
      46   ,
      28   ,
      21   ,
      20   ,
      20   ,
      20   ,
      21   ,
      20   ,
      21   ,
      33   ,
      20   ,
      41   ,
      57   ,
      57   ,
      56   ,
      51   ,
      28   ,
      18   ,
      24   ,
      40   ,
      52   ,
      52   ,
      52   ,
      51   ,
      44   ,
      37   ,
      19   ,
      19   ,
      18   ,
      19   ,
      18   ,
      19   ,
      20   ,
      26   ,
      24   ,
      36   ,
      56   ,
      54   ,
      52   ,
      50   ,
      26   ,
      24   ,
      26   ,
      32   ,
      42   ,
      53   ,
      60   ,
      34   ,
      24   ,
      22   ,
      20   ,
      19   ,
      20   ,
      19   ,
      19   ,
      20   ,
      21   ,
      26   ,
      19   ,
      13   ,
      13   ,
      32   ,
      42   ,
      36   ,
      12   ,
      11   ,
      10   ,
      16   ,
      23   ,
      22   ,
      19   ,
      22   ,
      21   ,
      21   ,
      18   ,
      19   ,
      18   ,
      18   ,
      19   ,
      18   ,
      21   ,
      37   ,
      32   ,
      30   ,
      22   ,
      22   ,
      31   ,
      21   ,
      19   ,
      21   ,
      29   ,
      55   ,
      56   ,
      60   ,
      51   ,
      48   ,
      46   ,
      39   ,
      18   ,
      16   ,
      17   ,
      16   ,
      16   ,
      17   ,
      16   ,
      32   ,
      35   ,
      37   ,
      53   ,
      52   ,
      50   ,
      50   ,
      31   ,
      19   ,
      46   ,
      65   ,
      58   ,
      59   ,
      58   ,
      54   ,
      49   ,
      41   ,
      21   ,
      21   ,
      21   ,
      21   ,
      20   ,
      21   ,
      20   ,
      38   ,
      39   ,
      37   ,
      53   ,
      58   ,
      67   ,
      66   ,
      53   ,
      31   ,
      47   ,
      60   ,
      61   ,
      58   ,
      64   ,
      50   ,
      47   ,
      37   ,
      16   ,
      17   ,
      16   ,
      17   ,
      17   ,
      17   ,
      18   ,
      33   ,
      32   ,
      36   ,
      36   ,
      39   ,
      42   ,
      43   ,
      36   ,
      25   ,
      19   ,
      51   ,
      57   ,
      55   ,
      50   ,
      47   ,
      45   ,
      34   ,
      16   ,
      16   ,
      17   ,
      16   ,
      16   ,
      17   ,
      16   ,
      33   ,
      24   ,
      27   ,
      39   ,
      56   ,
      60   ,
      55   ,
      33   ,
      44   ,
      38   ,
      45   ,
      57   ,
      58   ,
      47   ,
      43   ,
      40   ,
      34   ,
      24   ,
      24   ,
      24   ,
      24   ,
      24   ,
      24   ,
      25   ,
      35   ,
      29   ,
      43   ,
      44   ,
      43   ,
      38   ,
      25   ,
      19   ,
      17   ,
      19   ,
      32   ,
      40   ,
      39   ,
      37   ,
      31   ,
      27   ,
      25   ,
      23   ,
      23   ,
      24   ,
      23   ,
      22   ,
      23   ,
      26   ,
      35   ,
      24   ,
      28   ,
      22   ,
      24   ,
      22   ,
      20   ,
      20   ,
      19   ,
      21   ,
      28   ,
      29   ,
      24   ,
      24   ,
      25   ,
      24   ,
      25   ,
      23   ,
      24   ,
      22   ,
      23   ,
      23   ,
      23   ,
      25   ,
      49   ,
      46   ,
      49   ,
      62   ,
      66   ,
      68   ,
      62   ,
      41   ,
      29   ,
      25   ,
      54   ,
      58   ,
      70   ,
      75   ,
      56   ,
      49   ,
      35   ,
      23   ,
      23   ,
      23   ,
      22   ,
      23   ,
      23   ,
      25   ,
      47   ,
      37   ,
      46   ,
      65   ,
      64   ,
      59   ,
      60   ,
      49   ,
      38   ,
      45   ,
      76   ,
      91   ,
      110  ,
      160  ,
      158  ,
      137  ,
      68   ,
      37   ,
      25   ,
      24   ,
      23   ,
      24   ,
      24   ,
      27   ,
      44   ,
      87   ,
      74   ,
      50   ,
      59   ,
      63   ,
      65   ,
      55   ,
      26   ,
      25   ,
      43   ,
      64   ,
      60   ,
      59   ,
      57   ,
      53   ,
      43   ,
      23   ,
      23   ,
      23   ,
      24   ,
      22   ,
      23   ,
      25   ,
      45   ,
      38   ,
      49   ,
      60   ,
      63   ,
      71   ,
      63   ,
      44   ,
      26   ,
      25   ,
      61   ,
      64   ,
      60   ,
      57   ,
      54   ,
      51   ,
      45   ,
      24   ,
      22   ,
      23   ,
      23   ,
      23   ,
      23   ,
      24   ,
      49   ,
      44   ,
      52   ,
      59   ,
      69   ,
      70   ,
      62   ,
      44   ,
      33   ,
      39   ,
      56   ,
      89   ,
      177  ,
      172  ,
      151  ,
      56   ,
      40   ,
      22   ,
      23   ,
      22   ,
      23   ,
      22   ,
      23   ,
      23   ,
      52   ,
      44   ,
      48   ,
      60   ,
      65   ,
      65   ,
      36   ,
      27   ,
      26   ,
      40   ,
      55   ,
      77   ,
      168  ,
      205  ,
      181  ,
      140  ,
      85   ,
      41   ,
      27   ,
      27   ,
      28   ,
      28   ,
      27   ,
      28   ,
      43   ,
      35   ,
      32   ,
      24   ,
      32   ,
      47   ,
      37   ,
      18   ,
      14   ,
      52   ,
      60   ,
      64   ,
      64   ,
      56   ,
      32   ,
      30   ,
      24   ,
      23   ,
      22   ,
      23   ,
      22   ,
      22   ,
      23   ,
      23   ,
      47   ,
      45   ,
      56   ,
      77   ,
      110  ,
      127  ,
      80   ,
      51   ,
      33   ,
      37   ,
      82   ,
      91   ,
      83   ,
      78   ,
      72   ,
      50   ,
      39   ,
      24   ,
      25   ,
      24   ,
      23   ,
      24   ,
      24   ,
      26   ,
      41   ,
      36   ,
      43   ,
      82   ,
      142  ,
      122  ,
      64   ,
      48   ,
      33   ,
      39   ,
      73   ,
      74   ,
      75   ,
      73   ,
      59   ,
      46   ,
      30   ,
      25   ,
      24   ,
      24   ,
      24   ,
      25   ,
      24   ,
      26   ,
      42   ,
      36   ,
      48   ,
      72   ,
      143  ,
      111  ,
      82   ,
      45   ,
      33   ,
      37   ,
      81   ,
      92   ,
      87   ,
      80   ,
      70   ,
      54   ,
      43   ,
      24   ,
      24   ,
      24   ,
      24   ,
      23   ,
      24   ,
      25   ,
      45   ,
      39   ,
      48   ,
      54   ,
      53   ,
      52   ,
      86   ,
      44   ,
      43   ,
      41   ,
      71   ,
      83   ,
      79   ,
      71   ,
      62   ,
      55   ,
      41   ,
      24   ,
      24   ,
      25   ,
      24   ,
      24   ,
      25   ,
      25   ,
      50   ,
      39   ,
      52   ,
      134  ,
      88   ,
      69   ,
      61   ,
      38   ,
      66   ,
      104  ,
      106  ,
      84   ,
      88   ,
      91   ,
      86   ,
      66   ,
      59   ,
      47   ,
      39   ,
      38   ,
      26   ,
      26   ,
      27   ,
      45   ,
      46   ,
      53   ,
      68   ,
      67   ,
      52   ,
      50   ,
      48   ,
      46   ,
      87   ,
      114  ,
      122  ,
      130  ,
      130  ,
      123  ,
      89   ,
      53   ,
      41   ,
      23   ,
      23   ,
      24   ,
      23   ,
      24   ,
      24   ,
      25   ,
      37   ,
      22   ,
      28   ,
      30   ,
      30   ,
      29   ,
      30   ,
      30   ,
      35   ,
      37   ,
      49   ,
      52   ,
      52   ,
      50   ,
      45   ,
      39   ,
      29   ,
      23   ,
      24   ,
      24   ,
      23   ,
      24   ,
      23   ,
      24   ,
      46   ,
      44   ,
      52   ,
      125  ,
      107  ,
      48   ,
      59   ,
      58   ,
      54   ,
      59   ,
      94   ,
      93   ,
      91   ,
      73   ,
      64   ,
      50   ,
      47   ,
      26   ,
      27   ,
      25   ,
      24   ,
      24   ,
      24   ,
      26   ,
      43   ,
      43   ,
      117  ,
      146  ,
      128  ,
      122  ,
      91   ,
      63   ,
      55   ,
      58   ,
      86   ,
      102  ,
      92   ,
      83   ,
      64   ,
      56   ,
      34   ,
      26   ,
      26   ,
      25   ,
      24   ,
      25   ,
      24   ,
      26   ,
      42   ,
      41   ,
      116  ,
      151  ,
      156  ,
      145  ,
      98   ,
      61   ,
      53   ,
      50   ,
      77   ,
      94   ,
      95   ,
      85   ,
      80   ,
      72   ,
      57   ,
    ];
    return calcula()[0];
  }

  function desembre(){//2022
    periodes=[
      new Periode(tipus_mesos[des],new Date(Date.UTC(2022,des,01)),new Date(Date.UTC(2023,gen,01)))
    ];
    //preus per kW per cada període
    eurKWP1 = 31*0.039562; //€/kW
    eurKWP2 = 31*0.030486; //€/kW
    eurKWP3 = 31*0.014036; //€/kW
    eurKWP4 = 31*0.011610; //€/kW
    eurKWP5 = 31*0.007007; //€/kW
    eurKWP6 = 31*0.004878; //€/kW

    //preus per kWh per cada període
    eurKWhP1 = 0.308093; //€/kWh
    eurKWhP2 = 0.296834; //€/kWh
    eurKWhP3 = 0; //€/kWh
    eurKWhP4 = 0; //€/kWh
    eurKWhP5 = 0; //€/kWh
    eurKWhP6 = 0.254636; //€/kWh

    //altres
    tax_alq     = 30.51 //€
    preu_topall = 0.02336; //eur/kWh
    tax_im1     = 0.00500; //impost electricitat
    tax_iva     = 0.21;
    energy=[
      30   ,
      30   ,
      29   ,
      28   ,
      29   ,
      28   ,
      32   ,
      49   ,
      42   ,
      48   ,
      110  ,
      155  ,
      158  ,
      134  ,
      67   ,
      59   ,
      52   ,
      92   ,
      163  ,
      231  ,
      192  ,
      161  ,
      68   ,
      43   ,
      30   ,
      30   ,
      30   ,
      27   ,
      28   ,
      27   ,
      30   ,
      57   ,
      59   ,
      54   ,
      121  ,
      148  ,
      155  ,
      116  ,
      63   ,
      32   ,
      31   ,
      62   ,
      85   ,
      83   ,
      79   ,
      73   ,
      55   ,
      41   ,
      27   ,
      27   ,
      27   ,
      25   ,
      24   ,
      25   ,
      29   ,
      46   ,
      68   ,
      131  ,
      142  ,
      141  ,
      124  ,
      65   ,
      40   ,
      78   ,
      106  ,
      70   ,
      63   ,
      61   ,
      62   ,
      32   ,
      29   ,
      27   ,
      26   ,
      26   ,
      26   ,
      24   ,
      24   ,
      24   ,
      25   ,
      47   ,
      58   ,
      60   ,
      134  ,
      212  ,
      218  ,
      185  ,
      152  ,
      51   ,
      52   ,
      66   ,
      72   ,
      71   ,
      64   ,
      37   ,
      30   ,
      28   ,
      28   ,
      28   ,
      27   ,
      26   ,
      26   ,
      25   ,
      26   ,
      48   ,
      52   ,
      53   ,
      55   ,
      132  ,
      141  ,
      80   ,
      46   ,
      60   ,
      102  ,
      126  ,
      100  ,
      102  ,
      88   ,
      76   ,
      63   ,
      46   ,
      28   ,
      27   ,
      26   ,
      24   ,
      25   ,
      24   ,
      25   ,
      30   ,
      34   ,
      37   ,
      103  ,
      125  ,
      101  ,
      53   ,
      26   ,
      19   ,
      31   ,
      40   ,
      49   ,
      63   ,
      61   ,
      48   ,
      45   ,
      34   ,
      27   ,
      27   ,
      26   ,
      24   ,
      24   ,
      24   ,
      26   ,
      52   ,
      48   ,
      104  ,
      142  ,
      160  ,
      139  ,
      97   ,
      83   ,
      60   ,
      54   ,
      84   ,
      99   ,
      142  ,
      175  ,
      158  ,
      141  ,
      71   ,
      29   ,
      29   ,
      28   ,
      26   ,
      26   ,
      26   ,
      26   ,
      37   ,
      33   ,
      57   ,
      101  ,
      83   ,
      38   ,
      36   ,
      43   ,
      57   ,
      136  ,
      176  ,
      177  ,
      135  ,
      73   ,
      53   ,
      32   ,
      30   ,
      27   ,
      27   ,
      27   ,
      25   ,
      25   ,
      24   ,
      26   ,
      41   ,
      41   ,
      41   ,
      47   ,
      121  ,
      102  ,
      66   ,
      44   ,
      24   ,
      24   ,
      45   ,
      65   ,
      80   ,
      79   ,
      70   ,
      54   ,
      40   ,
      29   ,
      29   ,
      29   ,
      28   ,
      27   ,
      27   ,
      28   ,
      44   ,
      39   ,
      76   ,
      118  ,
      94   ,
      50   ,
      21   ,
      19   ,
      18   ,
      18   ,
      79   ,
      85   ,
      47   ,
      32   ,
      30   ,
      29   ,
      30   ,
      26   ,
      27   ,
      26   ,
      25   ,
      25   ,
      26   ,
      26   ,
      39   ,
      31   ,
      52   ,
      115  ,
      92   ,
      71   ,
      66   ,
      34   ,
      44   ,
      113  ,
      210  ,
      179  ,
      160  ,
      69   ,
      45   ,
      38   ,
      30   ,
      26   ,
      26   ,
      25   ,
      24   ,
      24   ,
      24   ,
      27   ,
      47   ,
      43   ,
      43   ,
      49   ,
      77   ,
      152  ,
      90   ,
      53   ,
      53   ,
      63   ,
      82   ,
      106  ,
      106  ,
      85   ,
      76   ,
      56   ,
      44   ,
      26   ,
      26   ,
      25   ,
      24   ,
      22   ,
      23   ,
      23   ,
      47   ,
      42   ,
      54   ,
      102  ,
      145  ,
      131  ,
      115  ,
      80   ,
      53   ,
      53   ,
      87   ,
      102  ,
      112  ,
      89   ,
      62   ,
      51   ,
      35   ,
      25   ,
      25   ,
      24   ,
      23   ,
      22   ,
      23   ,
      27   ,
      51   ,
      57   ,
      62   ,
      126  ,
      146  ,
      145  ,
      125  ,
      101  ,
      61   ,
      51   ,
      81   ,
      102  ,
      103  ,
      85   ,
      80   ,
      60   ,
      46   ,
      27   ,
      28   ,
      26   ,
      25   ,
      25   ,
      25   ,
      32   ,
      50   ,
      45   ,
      45   ,
      58   ,
      58   ,
      62   ,
      67   ,
      63   ,
      61   ,
      55   ,
      87   ,
      93   ,
      97   ,
      87   ,
      61   ,
      51   ,
      38   ,
      24   ,
      24   ,
      24   ,
      25   ,
      24   ,
      24   ,
      25   ,
      54   ,
      54   ,
      95   ,
      147  ,
      121  ,
      115  ,
      99   ,
      64   ,
      50   ,
      53   ,
      76   ,
      80   ,
      79   ,
      61   ,
      65   ,
      55   ,
      37   ,
      24   ,
      23   ,
      23   ,
      24   ,
      23   ,
      24   ,
      23   ,
      46   ,
      44   ,
      61   ,
      146  ,
      110  ,
      94   ,
      91   ,
      36   ,
      23   ,
      18   ,
      31   ,
      52   ,
      65   ,
      67   ,
      55   ,
      31   ,
      28   ,
      25   ,
      24   ,
      25   ,
      25   ,
      25   ,
      24   ,
      27   ,
      46   ,
      41   ,
      50   ,
      116  ,
      197  ,
      199  ,
      151  ,
      104  ,
      47   ,
      37   ,
      44   ,
      42   ,
      42   ,
      41   ,
      40   ,
      32   ,
      28   ,
      24   ,
      25   ,
      25   ,
      24   ,
      25   ,
      25   ,
      26   ,
      51   ,
      48   ,
      47   ,
      53   ,
      43   ,
      42   ,
      44   ,
      36   ,
      34   ,
      39   ,
      88   ,
      103  ,
      93   ,
      86   ,
      77   ,
      57   ,
      49   ,
      28   ,
      28   ,
      28   ,
      27   ,
      27   ,
      27   ,
      28   ,
      49   ,
      45   ,
      59   ,
      136  ,
      107  ,
      102  ,
      89   ,
      39   ,
      29   ,
      49   ,
      95   ,
      107  ,
      126  ,
      110  ,
      70   ,
      49   ,
      37   ,
      27   ,
      28   ,
      27   ,
      29   ,
      28   ,
      28   ,
      25   ,
      35   ,
      40   ,
      112  ,
      137  ,
      127  ,
      95   ,
      69   ,
      61   ,
      57   ,
      69   ,
      135  ,
      260  ,
      242  ,
      204  ,
      101  ,
      64   ,
      54   ,
      48   ,
      40   ,
      40   ,
      36   ,
      27   ,
      25   ,
      26   ,
      47   ,
      47   ,
      53   ,
      61   ,
      61   ,
      60   ,
      52   ,
      48   ,
      39   ,
      39   ,
      83   ,
      78   ,
      75   ,
      75   ,
      58   ,
      52   ,
      47   ,
      45   ,
      43   ,
      43   ,
      44   ,
      43   ,
      44   ,
      43   ,
      48   ,
      47   ,
      49   ,
      57   ,
      61   ,
      62   ,
      58   ,
      45   ,
      41   ,
      37   ,
      57   ,
      59   ,
      61   ,
      66   ,
      55   ,
      41   ,
      32   ,
      30   ,
      30   ,
      30   ,
      30   ,
      29   ,
      30   ,
      30   ,
      48   ,
      52   ,
      45   ,
      54   ,
      58   ,
      59   ,
      63   ,
      53   ,
      65   ,
      76   ,
      92   ,
      95   ,
      84   ,
      70   ,
      65   ,
      63   ,
      62   ,
      62   ,
      62   ,
      63   ,
      62   ,
      62   ,
      62   ,
      63   ,
      81   ,
      83   ,
      56   ,
      89   ,
      94   ,
      96   ,
      96   ,
      93   ,
      85   ,
      85   ,
      94   ,
      98   ,
      97   ,
      99   ,
      102  ,
      100  ,
      99   ,
      94   ,
      63   ,
      62   ,
      62   ,
      62   ,
      63   ,
      66   ,
      88   ,
      98   ,
      100  ,
      75   ,
      76   ,
      69   ,
      62   ,
      63   ,
      58   ,
      59   ,
      92   ,
      114  ,
      117  ,
      111  ,
      87   ,
      80   ,
      62   ,
      63   ,
      62   ,
      62   ,
      62   ,
      61   ,
      62   ,
      63   ,
      84   ,
      102  ,
      112  ,
      113  ,
      102  ,
      93   ,
      100  ,
      82   ,
      72   ,
      72   ,
      86   ,
      101  ,
      99   ,
      95   ,
      88   ,
      63   ,
      70   ,
      63   ,
      63   ,
      64   ,
      64   ,
      64   ,
      64   ,
      67   ,
      84   ,
      88   ,
      105  ,
      109  ,
      108  ,
      100  ,
      77   ,
      69   ,
      67   ,
      78   ,
      109  ,
      116  ,
      111  ,
      107  ,
      89   ,
      87   ,
      72   ,
      63   ,
      62   ,
      61   ,
      61   ,
      62   ,
      62   ,
      62   ,
      75   ,
      81   ,
      106  ,
      102  ,
      90   ,
      80   ,
      87   ,
      77   ,
      77   ,
      80   ,
      92   ,
      94   ,
      96   ,
      90   ,
      89   ,
      116  ,
      66   ,
      59   ,
      59   ,
      60   ,
      59   ,
      59   ,
      59   ,
      65   ,
      81   ,
      78   ,
      100  ,
      100  ,
      100  ,
      100  ,
      106  ,
      106  ,
      70   ,
      63   ,
      94   ,
      110  ,
      104  ,
      88   ,
      83   ,
      72   ,
      65   ,
      63   ,
      62   ,
      60   ,
      59   ,
      56   ,
      52   ,
      39   ,
      44   ,
      55   ,
      49   ,
      46   ,
      45   ,
      47   ,
      49   ,
      41   ,
      44   ,
      48   ,
      53   ,
      58   ,
      50   ,
      41   ,
      23   ,
      18   ,
      18   ,
    ];
    return calcula()[0];
  }

  function gener(){//2023
    periodes=[
      new Periode(tipus_mesos[gen],new Date(Date.UTC(2023,gen,01)),new Date(Date.UTC(2023,feb,01)))
    ];
    //preus per kW per cada període
    eurKWP1 = 31*0.038308; //€/kW
    eurKWP2 = 31*0.032600; //€/kW
    eurKWP3 = 31*0.010965; //€/kW
    eurKWP4 = 31*0.010011; //€/kW
    eurKWP5 = 31*0.007487; //€/kW
    eurKWP6 = 31*0.005483; //€/kW

    //preus per kWh per cada període
    eurKWhP1 = 0.235196; //€/kWh
    eurKWhP2 = 0.224059; //€/kWh
    eurKWhP3 = 0.000000; //€/kWh
    eurKWhP4 = 0.000000; //€/kWh
    eurKWhP5 = 0.000000; //€/kWh
    eurKWhP6 = 0.182122; //€/kWh

    //ALTRES i IMPOSTOS
    tax_alq     = 30.51;   //€
    preu_topall = 0.00487; //eur/kWh
    tax_im1     = 0.00500; //impost electricitat
    tax_iva     = 0.21;
    energy=[
      18   ,
      17   ,
      18   ,
      17   ,
      18   ,
      17   ,
      17   ,
      17   ,
      22   ,
      7    ,
      17   ,
      15   ,
      7    ,
      7    ,
      10   ,
      13   ,
      14   ,
      22   ,
      27   ,
      25   ,
      20   ,
      21   ,
      15   ,
      15   ,
      16   ,
      15   ,
      15   ,
      16   ,
      16   ,
      16   ,
      36   ,
      65   ,
      62   ,
      72   ,
      76   ,
      75   ,
      77   ,
      76   ,
      72   ,
      128  ,
      139  ,
      127  ,
      131  ,
      112  ,
      64   ,
      51   ,
      50   ,
      39   ,
      24   ,
      25   ,
      25   ,
      25   ,
      25   ,
      24   ,
      27   ,
      57   ,
      64   ,
      79   ,
      154  ,
      152  ,
      125  ,
      82   ,
      41   ,
      36   ,
      66   ,
      79   ,
      109  ,
      221  ,
      205  ,
      186  ,
      140  ,
      50   ,
      28   ,
      24   ,
      25   ,
      23   ,
      23   ,
      23   ,
      25   ,
      55   ,
      60   ,
      81   ,
      152  ,
      150  ,
      81   ,
      47   ,
      42   ,
      33   ,
      48   ,
      115  ,
      236  ,
      231  ,
      165  ,
      93   ,
      52   ,
      50   ,
      29   ,
      30   ,
      30   ,
      29   ,
      29   ,
      29   ,
      34   ,
      46   ,
      53   ,
      72   ,
      111  ,
      121  ,
      137  ,
      114  ,
      41   ,
      29   ,
      22   ,
      27   ,
      34   ,
      36   ,
      35   ,
      32   ,
      29   ,
      27   ,
      24   ,
      25   ,
      24   ,
      24   ,
      24   ,
      24   ,
      24   ,
      37   ,
      35   ,
      79   ,
      100  ,
      100  ,
      52   ,
      32   ,
      77   ,
      100  ,
      61   ,
      23   ,
      30   ,
      29   ,
      29   ,
      29   ,
      27   ,
      27   ,
      24   ,
      23   ,
      23   ,
      24   ,
      23   ,
      24   ,
      25   ,
      58   ,
      91   ,
      80   ,
      91   ,
      83   ,
      21   ,
      17   ,
      16   ,
      14   ,
      14   ,
      21   ,
      25   ,
      27   ,
      26   ,
      26   ,
      27   ,
      26   ,
      24   ,
      24   ,
      24   ,
      24   ,
      24   ,
      23   ,
      25   ,
      35   ,
      24   ,
      16   ,
      16   ,
      17   ,
      14   ,
      15   ,
      16   ,
      15   ,
      14   ,
      19   ,
      25   ,
      25   ,
      26   ,
      26   ,
      26   ,
      26   ,
      24   ,
      23   ,
      24   ,
      24   ,
      24   ,
      24   ,
      24   ,
      45   ,
      54   ,
      64   ,
      115  ,
      156  ,
      122  ,
      85   ,
      64   ,
      56   ,
      58   ,
      78   ,
      90   ,
      90   ,
      80   ,
      74   ,
      56   ,
      43   ,
      23   ,
      23   ,
      23   ,
      24   ,
      23   ,
      23   ,
      25   ,
      42   ,
      46   ,
      82   ,
      155  ,
      131  ,
      123  ,
      109  ,
      65   ,
      56   ,
      51   ,
      84   ,
      91   ,
      92   ,
      86   ,
      69   ,
      57   ,
      37   ,
      23   ,
      23   ,
      23   ,
      24   ,
      23   ,
      23   ,
      25   ,
      44   ,
      39   ,
      48   ,
      45   ,
      68   ,
      55   ,
      45   ,
      62   ,
      61   ,
      61   ,
      82   ,
      103  ,
      101  ,
      89   ,
      64   ,
      58   ,
      49   ,
      25   ,
      26   ,
      25   ,
      26   ,
      25   ,
      24   ,
      26   ,
      38   ,
      48   ,
      85   ,
      146  ,
      155  ,
      146  ,
      95   ,
      69   ,
      63   ,
      68   ,
      99   ,
      110  ,
      94   ,
      81   ,
      72   ,
      59   ,
      43   ,
      29   ,
      27   ,
      28   ,
      27   ,
      27   ,
      26   ,
      29   ,
      41   ,
      56   ,
      67   ,
      140  ,
      158  ,
      158  ,
      101  ,
      68   ,
      51   ,
      55   ,
      72   ,
      80   ,
      76   ,
      72   ,
      74   ,
      58   ,
      43   ,
      26   ,
      26   ,
      26   ,
      25   ,
      25   ,
      26   ,
      26   ,
      47   ,
      81   ,
      123  ,
      135  ,
      133  ,
      114  ,
      95   ,
      51   ,
      46   ,
      58   ,
      156  ,
      215  ,
      196  ,
      166  ,
      74   ,
      54   ,
      49   ,
      30   ,
      29   ,
      29   ,
      28   ,
      29   ,
      29   ,
      33   ,
      55   ,
      54   ,
      50   ,
      43   ,
      45   ,
      43   ,
      34   ,
      116  ,
      190  ,
      160  ,
      120  ,
      69   ,
      54   ,
      39   ,
      25   ,
      24   ,
      24   ,
      23   ,
      23   ,
      22   ,
      23   ,
      23   ,
      23   ,
      26   ,
      38   ,
      50   ,
      66   ,
      120  ,
      169  ,
      135  ,
      115  ,
      65   ,
      62   ,
      78   ,
      82   ,
      90   ,
      95   ,
      81   ,
      71   ,
      51   ,
      37   ,
      25   ,
      25   ,
      24   ,
      25   ,
      24   ,
      23   ,
      27   ,
      42   ,
      52   ,
      92   ,
      142  ,
      143  ,
      134  ,
      88   ,
      73   ,
      54   ,
      68   ,
      85   ,
      110  ,
      112  ,
      92   ,
      62   ,
      51   ,
      35   ,
      27   ,
      26   ,
      25   ,
      25   ,
      24   ,
      25   ,
      25   ,
      49   ,
      78   ,
      119  ,
      165  ,
      157  ,
      121  ,
      95   ,
      72   ,
      58   ,
      70   ,
      100  ,
      133  ,
      228  ,
      249  ,
      236  ,
      144  ,
      57   ,
      31   ,
      27   ,
      25   ,
      25   ,
      25   ,
      26   ,
      26   ,
      41   ,
      49   ,
      71   ,
      143  ,
      153  ,
      153  ,
      115  ,
      69   ,
      48   ,
      52   ,
      77   ,
      102  ,
      97   ,
      86   ,
      62   ,
      56   ,
      42   ,
      27   ,
      26   ,
      26   ,
      26   ,
      24   ,
      26   ,
      25   ,
      41   ,
      67   ,
      137  ,
      162  ,
      167  ,
      129  ,
      109  ,
      54   ,
      40   ,
      44   ,
      59   ,
      76   ,
      77   ,
      71   ,
      70   ,
      56   ,
      46   ,
      25   ,
      24   ,
      24   ,
      23   ,
      24   ,
      24   ,
      24   ,
      40   ,
      53   ,
      60   ,
      67   ,
      75   ,
      68   ,
      60   ,
      30   ,
      24   ,
      35   ,
      58   ,
      69   ,
      66   ,
      61   ,
      48   ,
      35   ,
      29   ,
      23   ,
      24   ,
      23   ,
      24   ,
      23   ,
      24   ,
      24   ,
      33   ,
      30   ,
      32   ,
      59   ,
      119  ,
      95   ,
      44   ,
      17   ,
      22   ,
      25   ,
      29   ,
      37   ,
      36   ,
      29   ,
      29   ,
      29   ,
      27   ,
      22   ,
      23   ,
      22   ,
      23   ,
      22   ,
      22   ,
      23   ,
      39   ,
      44   ,
      108  ,
      151  ,
      155  ,
      81   ,
      54   ,
      51   ,
      53   ,
      49   ,
      75   ,
      98   ,
      103  ,
      87   ,
      77   ,
      53   ,
      44   ,
      25   ,
      24   ,
      24   ,
      24   ,
      24   ,
      24   ,
      25   ,
      42   ,
      46   ,
      56   ,
      131  ,
      158  ,
      157  ,
      162  ,
      87   ,
      56   ,
      54   ,
      88   ,
      103  ,
      116  ,
      102  ,
      68   ,
      55   ,
      43   ,
      26   ,
      26   ,
      25   ,
      25   ,
      25   ,
      25   ,
      26   ,
      49   ,
      48   ,
      90   ,
      147  ,
      160  ,
      156  ,
      93   ,
      62   ,
      53   ,
      52   ,
      71   ,
      97   ,
      105  ,
      86   ,
      71   ,
      56   ,
      44   ,
      24   ,
      24   ,
      24   ,
      24   ,
      24   ,
      24   ,
      27   ,
      46   ,
      50   ,
      124  ,
      145  ,
      150  ,
      154  ,
      111  ,
      64   ,
      50   ,
      52   ,
      85   ,
      107  ,
      102  ,
      102  ,
      74   ,
      52   ,
      32   ,
      23   ,
      23   ,
      23   ,
      23   ,
      24   ,
      23   ,
      24   ,
      45   ,
      68   ,
      139  ,
      144  ,
      145  ,
      156  ,
      109  ,
      80   ,
      58   ,
      69   ,
      81   ,
      88   ,
      83   ,
      79   ,
      77   ,
      51   ,
      39   ,
      23   ,
      23   ,
      23   ,
      22   ,
      23   ,
      22   ,
      23   ,
      42   ,
      45   ,
      71   ,
      113  ,
      138  ,
      141  ,
      125  ,
      41   ,
      42   ,
      51   ,
      65   ,
      137  ,
      235  ,
      230  ,
      201  ,
      152  ,
      77   ,
      46   ,
      25   ,
      26   ,
      26   ,
      27   ,
      26   ,
      27   ,
      32   ,
      31   ,
      17   ,
      16   ,
      17   ,
      17   ,
      16   ,
      15   ,
      17   ,
      22   ,
      24   ,
      35   ,
      34   ,
      30   ,
      24   ,
      26   ,
      25   ,
      23   ,
      24   ,
      23   ,
      23   ,
      23   ,
      24   ,
      24   ,
      38   ,
      50   ,
      114  ,
      158  ,
      165  ,
      150  ,
      94   ,
      63   ,
      46   ,
      45   ,
      80   ,
      97   ,
      101  ,
      87   ,
      65   ,
      45   ,
      36   ,
      23   ,
      23   ,
      23   ,
      22   ,
      23   ,
      22   ,
      23   ,
      40   ,
      42   ,
      111  ,
      125  ,
      162  ,
      134  ,
      95   ,
      61   ,
      48   ,
      56   ,
      76   ,
      92   ,
      104  ,
      88   ,
      67   ,
      46   ,
      33   ,
    ];
    return calcula()[0];
  }

  function febrer(){//2023 TODO no hi ha lectures del comptador
    periodes=[
      new Periode(tipus_mesos[feb],new Date(Date.UTC(2023,feb,01)),new Date(Date.UTC(2023,mar,01)))
    ];

    energy=[
      //TODO
    ];
    return calcula()[0];
  }

  function marc(){//2023 TODO no hi ha lectures del comptador
    periodes=[
      new Periode(tipus_mesos[mar],new Date(Date.UTC(2023,mar,01)),new Date(Date.UTC(2023,abr,01)))
    ]
    energy=[
      //TODO
    ];
    return calcula()[0];
  }

  function abril(){//2023 TODO no hi ha lectures del comptador
    periodes=[
      new Periode(tipus_mesos[abr],new Date(Date.UTC(2023,abr,01)),new Date(Date.UTC(2023,mai,01)))
    ];
    energy=[
      //TODO
    ];
    return calcula()[0];
  }

  function maig(){//2023 TODO no hi ha lectures del comptador
    periodes=[
      new Periode(tipus_mesos[mai],new Date(Date.UTC(2023,mai,01)),new Date(Date.UTC(2023,jun,01)))
    ];
    energy=[
      //TODO
    ];
    return calcula()[0];
  }

  function juny(){//2023 TODO no hi ha lectures del comptador
    periodes=[
      new Periode(tipus_mesos[jun],new Date(Date.UTC(2023,jun,01)),new Date(Date.UTC(2023,jul,01)))
    ];
    energy=[
      //TODO
    ];
    return calcula()[0];
  }

  //suma tots els mesos
  function tots_els_mesos(log){
    log = log || false;

    let costos=[
      juliol(), //2022
      agost(), //2022
      setembre(), //2022
      octubre(), //2022
      novembre(), //2022
      desembre(), //2022
      gener(), //2023
      //febrer(), //2023
      //marc(), //2023
      //abril(), //2023
      //maig(), //2023
      //juny(), //2023
    ];


    let term_poten    = costos.map(c=>c.term_poten   ).reduce((p,c)=>p+c,0); //€
    let excessos      = costos.map(c=>c.excessos     ).reduce((p,c)=>p+c,0); //€
    let total_amb_iva = costos.map(c=>c.total_amb_iva).reduce((p,c)=>p+c,0); //€

    if(log){
      console.log("Total + IVA REAL de cada mes")
      console.log(costos.map(c=>c.total_amb_iva));
      console.log(`Suma: ${total_amb_iva}`)
    }

    return {term_poten, excessos, total_amb_iva};
  }
//fi funcions

//suma real
let total = tots_els_mesos(log=true);
process.exit()

//init objecte resultat optimització
let op={
  costOptim:Infinity,
  potConP1:0,
  potConP2:0,
  potConP3:0,
  potConP4:0,
  potConP5:0,
  potConP6:0,
};
console.log("+--------------------------------------------------+");
console.log("| Optimització: Simulació de Potències Contractades |");
console.log("+--------------------------------------------------+");

//definir potència inicial, final i step
let pot_ini =  50;//inicial
let pot_fin = 300;//final
let pot_stp =  10;//step

//combinacions de potències contractades
for(          let p1=pot_ini; p1<=pot_fin; p1+=pot_stp){
  for(        let p2=pot_ini; p2<=pot_fin; p2+=pot_stp){
    for(      let p3=pot_ini; p3<=pot_fin; p3+=pot_stp){
      for(    let p4=pot_ini; p4<=pot_fin; p4+=pot_stp){
        for(  let p5=pot_ini; p5<=pot_fin; p5+=pot_stp){
          for(let p6=pot_ini; p6<=pot_fin; p6+=pot_stp){
            if(p1<=p2 && p2<=p3 && p3<=p4 && p4<=p5 && p5<=p6){
              potConP1=p1;
              potConP2=p2;
              potConP3=p3;
              potConP4=p4;
              potConP5=p5;
              potConP6=p6;

              let cost = tots_els_mesos(); //object
              let term_poten    = cost.term_poten; //€
              let excessos      = cost.excessos; //€
              let total_amb_iva = cost.total_amb_iva //€;
              console.log(`combinació actual: ${p1}kW ${p2}kW ${p3}kW ${p4}kW ${p5}kW ${p6}kW: ${term_poten.toFixed(2)} € ${excessos.toFixed(2)} € ${total_amb_iva.toFixed(2)} €`);

              //si el nou cost és més petit guarda'l
              if(total_amb_iva<op.costOptim){
                op.costOptim=total_amb_iva;
                op.potConP1=p1;
                op.potConP2=p2;
                op.potConP3=p3;
                op.potConP4=p4;
                op.potConP5=p5;
                op.potConP6=p6;
              }
            }
          }
        }
      }
    }
  }
}
console.log(">>> OPTIMITZACIÓ FINALITZADA");
console.log(op);
